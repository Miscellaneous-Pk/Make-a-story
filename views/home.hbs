<!doctype html>

<html lang="en">

    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">

        <style type="text/css">
            /* width */

            ::-webkit-scrollbar {
                width: 1px;
                height: 0px;
            }

            /* Track */

            ::-webkit-scrollbar-track {
                background: #f1f1f1;
            }

            /* Handle */

            ::-webkit-scrollbar-thumb {
                background: #888;
            }

            /* Handle on hover */

            ::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

            .canvas-btn {

                cursor: pointer;
                position: relative;
                font-size: 80%;


            }

            bg-transparent {
                background-color: transparent;
            }

            canvas {
                position: absolute;
                z-index: 2;
                cursor: copy;


                /*				pointer-events: none;*/
            }

            .saving-div {
              pointer-events: none;
            }

            @keyframes blink {
                /**
                 * At the start of the animation the dot
                 * has an opacity of .2
                 */
                0% {
                  opacity: .2;
                }
                /**
                 * At 20% the dot is fully visible and
                 * then fades out slowly
                 */
                20% {
                  opacity: 1;
                }
                /**
                 * Until it reaches an opacity of .2 and
                 * the animation can start again
                 */
                100% {
                  opacity: .2;
                }
            }

            .saving span {
                /**
                 * Use the blink animation, which is defined above
                 */
                animation-name: blink;
                /**
                 * The animation should take 1.4 seconds
                 */
                animation-duration: 1.4s;
                /**
                 * It will repeat itself forever
                 */
                animation-iteration-count: infinite;
                /**
                 * This makes sure that the starting style (opacity: .2)
                 * of the animation is applied before the animation starts.
                 * Otherwise we would see a short flash or would have
                 * to set the default styling of the dots to the same
                 * as the animation. Same applies for the ending styles.
                 */
                animation-fill-mode: both;
            }

            .saving span:nth-child(2) {
                /**
                 * Starts the animation of the third dot
                 * with a delay of .2s, otherwise all dots
                 * would animate at the same time
                 */
                animation-delay: .2s;
            }

            .saving span:nth-child(3) {
                /**
                 * Starts the animation of the third dot
                 * with a delay of .4s, otherwise all dots
                 * would animate at the same time
                 */
                animation-delay: .4s;
            }

            .img-block {
                background: transparent;

            }

            .bg-shadow {

                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

            }

            .circleAndNo {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 2;
                font-size: 80%;
                font-weight: bold;
                height: 1.7rem;
                width: 1.7rem;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
                cursor: pointer;
            }

            .circleAndNo elem {

                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);

            }

            .circleAndNo span {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                height: 180%;
            }

            .fa-paint-brush {
                pointer-events: none;
            }

            textarea {
                resize: none;
            }

            .hover-pop {

                pointer-events: none;

            }

            .detailBox {
                position: absolute;
                z-index: 5;
                display: none;
                cursor: pointer;
            }

            .detailBox-text {

                position: relative;
                max-width: 100%;
                white-space: nowrap;
                overflow: hidden;

            }

            .span-No {
                min-width: 8.5%;
            }

            .detailBox-Big {

                top: 100%;
                left: 0%;
                /*								display: none;*/
                word-wrap: break-word;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

            }

            .deletecircleAndNo {

                cursor: pointer;

            }

            .setting-btn {

                position: relative;

            }

            .settings-btn span {

                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                height: 1.5rem;

            }

            .box {

                height: 3rem;
                width: 4rem;
                position: relative;
                cursor: pointer;

            }

            .rtbt-subBox {

                right: 0px;
                bottom: 0px;

            }

            .ltbt-subBox {

                left: 0px;
                bottom: 0px;

            }

            .lttp-subBox {

                top: 0px;
                left: 0px;

            }

            .rttp-subBox {

                top: 0px;
                right: 0px;

            }

            .bgbt-subBox {

                bottom: 0px;

            }

            .custom-popover-header::before {
                width: 0rem !important;
            }

            .settings-btn {
                position: relative;
                cursor: pointer;
                font-size: 80%;
            }

            #overlay {

                left: 50%;
                transform: translate(-50%, 0);
                z-index: 3;

            }

            .image {

                display: block;
                width: auto;
                height: auto;

            }

            .custom-hide {
                position: absolute !important;
                top: -9999px !important;
                left: -9999px !important;
            }

            .overflow-hidden {
                overflow: hidden;
            }

            .ui-dialog-titlebar {
                display: none;
            }

            .logout-btn {
                cursor: pointer;
            }

            .check-label label {
                height: 0px;
            }

            .custom-control-input:checked~.custom-control-label::before {

                background-color: #18a2b9 !important;

            }

            .back-btn {
                cursor: pointer;
            }

            /*Story Board CSS here*/

            .card img {

                /* flex-shrink: 0; */
                max-width: 100%;

            }

            .grid-item a:hover {
                text-decoration: none;
            }

            .draft-badge {

                position: absolute;
                top: 0.5em;
                right: 0.5em;

            }

            .Draft {
              background-color: #DB3445;
              /* color: #E2E6EA; */
            }

            .Published {
              background-color: #28A645;
              /* color: #E2E6EA; */
            }

            .delete-badge {
              position: absolute;
              top: 0.5em;
              left: 0.5em;
              z-index: 10;
              cursor: pointer;
            }

            .modal-spinner {

                position: absolute;
                top: 0%;
                width: 100%;
                height: 100%;
                z-index: 1000;
                background-color: rgba(0, 0, 0, 0.4);

            }

            .spinner {

                position: fixed;
                z-index: 1000;
                top: 50%;
                left: 50%;
                width: 4rem;
                height: 4rem;
                border-radius: 50%;
                border: 0.2rem solid transparent !important;
                border-top: 0.1rem solid #ffc107 !important;
                border-right: 0.1rem solid #ffc107 !important;
                border-bottom: 0.1rem solid #ffc107 !important;
                margin-top: -2rem;
                margin-left: -2rem;
                pointer-events: none;
                animation: spin 2s linear infinite;

            }

            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }

            .upload-btn-wrapper {

                cursor: pointer;
                /*				pointer-events: none;*/
            }

            .upload-btn-wrapper input[type=file] {

                position: absolute;
                top: -1000px;

            }

            .upload-textarea-wrapper .heading {

                z-index: 2;
                pointer-events: none;

            }

            .upload-btn-text {

                font-size: 200%;

            }

            .upload-textarea-wrapper textarea {

                font-size: 200%;
                z-index: 1;

            }

            .ok-btn {

                cursor: pointer;

            }

            .ok-btn-box {

                position: absolute;
                bottom: 0px;
                right: 0px;
                display: none;
                opacity: 0;
                z-index: 3;

            }

            .ok-btn-file {

                bottom: 0px;
                right: 0px;

            }

            .ok-btn-box label {

                height: 0px;

            }

            .ok-btn-box .error-span {

                display: none;

            }

            small {

                pointer-events: none;

            }

            #upload-error {

                display: none;

            }

            .preview-image-box {

                display: none;
                opacity: 0;

            }

            .card {
                cursor: pointer;
            }

            .small-elem {

                font-size: 80%;
            }

        </style>

        <title>Home - Make a story</title>
    </head>

    <body class="bg-info text-light">

        <div class="btn-container dialog">

            <div class="d-flex flex-column">

                <div class="w-100 bg-dark bg-shadow p-4">

                    <div class="d-flex align-items-center justify-content-between mx-1">

                        <h1 class="display-4">{{name}}</h1>

                        <a href="/logout/{{token}}" class="text-light mr-2" alt=""><i class="fas fa-sign-out-alt" alt="Log Out"></i></a>

                    </div>

                    <div class="d-flex flex-wrap my-1">

                        <button type="button" class="open-btn btn btn-lg m-1 btn-info">Make a story now <i class="fas fa-plus"></i></button>

                        <div class="w-100"></div>

                        <button type="button" class="contribution-btn btn btn-sm m-1 btn-light">
                            Contributions <span class="badge badge-info">18</span>
                        </button>

                        <div class="w-100 d-sm-none"></div>

                        <button type="button" class="published-btn btn btn-sm m-1 btn-light">
                            Published <span class="badge badge-success">4</span>
                        </button>

                        <button type="button" class="drafts-btn btn btn-sm m-1 btn-light">
                            Drafts <span class="badge badge-danger">14</span>
                        </button>

                    </div>

                </div>

                <div class="grid pt-2">

                  {{#each pictures}}

                  <div class="grid-item col-6 col-sm-4 col-md-3 col-lg-2 px-1 pb-2">
                    <div class="badge text-secondary delete-badge"><i class="fas fa-trash"></i></div>
                    <div class="card p-0 bg-dark bg-shadow">

                      <div class="badge draft-badge {{status}}">{{status}}</div>
                      <img class="card-image-top rounded-top border border-dark" src="{{thumbnail}}"  data-id="{{_id}}" data-comments= "{{data}}" data-image={{image}}>
											<div class="card-body p-1">
												<h6 class="mt-1 card-text image-title">{{title}}</h6>
												<div class="mb-1"><small class="text-muted image-created">Created on {{dates}}</small></div>
											</div>
										</div>
				          </div>

                  {{/each}}


                </div>

            </div>

        </div>

        <div class="container-fluid mainPage">

          <div id="dialog-uploadImage" class="container dialog d-flex align-items-center justify-content-center">

              <div class="col-lg-4 col-md-6 col-sm-8 col-12 bg-dark rounded text-light bg-shadow p-0 m-0">

                  <div class="p-0 m-0 upload-image-box">

                      <div class="my-0 position-relative h-50 bg-dark rounded-top ">

                          <label class="position-absolute upload-btn-wrapper w-100 h-100 d-flex align-items-center justify-content-center flex-wrap">

                              <div class="upload-error-here text-light text-center">
                                  <h5 class="upload-btn-text"><i class="fas fa-upload"></i></h5>
                                  <small>Click here to upload your image</small>
                              </div>

                              <input id="imgInp" type="file" name="myfile"/>

                          </label>

                          <div class="preview-image-box position-absolute rounded-top bg-dark w-100 h-100 align-items-center justify-content-center">

                              <div class="position-relative w-50 h-50 d-flex align-items-center justify-content-center flex-wrap">

                                  <img class="bg-light rounded p-1 text-dark" id="imgPreview" src="" alt="Image preview...">

                                  <small class="my-1"><i class="text-success fas fa-check-circle"></i> Yep looks good.</small>

                              </div>

                              <div class="ok-btn-file position-absolute d-flex align-items-end">

                                  <span class="change-upload-btn px-2 py-1 rounded mr-1 mb-1 bg-light text-dark "><small>Change</small></span>

                                  <span class="next-upload-btn px-2 py-1 rounded mr-1 mb-1 bg-light text-dark"><small>Next</small></span>

                              </div>

                          </div>

                      </div>

                      <div class="my-0 position-relative upload-textarea-wrapper h-50 border border-dark rounded-bottom">

                          <div class="heading position-absolute w-100 h-100 text-light d-flex align-items-center justify-content-center">
                              <div class="text-dark text-center">
                                  <h5 class="upload-btn-text"><i class="fas fa-clipboard"></i></h5>
                                  <small>Paste the link to your image here</small>
                              </div>
                          </div>

                          <form class="validate-image-exists">

                              <textarea id="image-link" name="image-link" class="border border-light bg-light position-absolute w-100 h-100 rounded-bottom p-4"></textarea>


                              <div class="ok-btn-box d-flex align-items-end rounded m-1 bg-dark">

                                  <span class="error-span px-2 py-1 text-light">

                                      <small>
                                          <label for="image-link" generated="true" class="error"></label>
                                      </small>

                                  </span>

                                  <span class="ok-btn px-2 py-1"><small>Next</small></span>

                              </div>

                          </form>

                      </div>

                  </div>

              </div>

          </div>

          <div id="dialog-final" class="pt-md-2 pt-0 d-flex flex-wrap align-items-stretch justify-content-center">

            <div class="position-fixed saving-div" style="z-index: 12">
              <div class="position-absolute text-right" style="right:20px; bottom:10px; z-index: 12">
                <small class="saving badge badge-pill badge-light saving-data shadow d-none">saving data <span>.</span><span>.</span><span>.</span> </small>
                <small class="saving badge badge-pill badge-light saving-image d-none">saving image <span>.</span><span>.</span><span>.</span></small>
                <small class="saving badge badge-pill badge-light saving-thumbnail d-none">saving thumbnail <span>.</span><span>.</span><span>.</span></small>
                <small class="badge badge-pill badge-success saving-done saving-badge"><i class="fas fa-check-circle"></i> Saved</small><br>
              </div>
            </div>

              <div class="col-lg-8 col-md-10 col-12 order-mdm-1 order-2 mx-0 p-0 rounded-top">

                  <div class="img-block">

                      <div id="overlay" class="position-absolute">

                          <div class="detailBox bg-dark rounded" ctr="4">


                              <small class="border-right px-1 rounded-left">1</small>
                              <small class="border-right px-1">2</small>
                              <small class="border-right px-1">3</small>
                              <small class="px-1 rounded-right">4</small>


                          </div>

                          <canvas data-html2canvas-ignore class="" id="myCanvas"></canvas>

                      </div>

                      <div class="" id="for-printing">

                          <div class="circleAndNo rounded-circle bg-info text-light">
                              <span data-container="body" data-toggle="popover" data-placement="top" data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus."></span>
                              <elem></elem>
                          </div>

                          <img class="image bg-shadow mx-auto border border-dark rounded-top" id="blah" src="" alt="">

                          <div class="position-relative mx-auto detailBox-Big">

                              <div class="d-flex flex-wrap bg-dark rounded-bottom">

                              </div>

                          </div>

                      </div>

                  </div>

              </div>

              <div class="order-md-2 order-1">

                  <div class="carry-menu d-flex align-items-center">

                      <div class="d-md-block mx-auto d-flex justify-content-center col-md-12 col-11 mx-2 text-center align-items-center">

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M24.2728 40.5628L29.3857 23.3762C29.3983 23.3342 29.4373 23.3042 29.4801 23.3042H34.4449C34.4888 23.3042 34.5267 23.3332 34.5384 23.3762L39.7262 40.5608C39.7359 40.5938 39.7311 40.6278 39.7145 40.6508C39.6941 40.6788 39.6639 40.6948 39.6318 40.6948H35.5615C35.5177 40.6948 35.4788 40.6658 35.4671 40.6218L34.334 36.7472C34.2532 36.4722 34.0059 36.2821 33.7255 36.2821H30.0389C29.7536 36.2821 29.5034 36.4772 29.4275 36.7602L28.3839 40.6198C28.3722 40.6638 28.3323 40.6948 28.2885 40.6948H24.3673C24.3361 40.6948 24.305 40.6788 24.2884 40.6558C24.2699 40.6288 24.2641 40.5938 24.2728 40.5628ZM24.3673 42H28.2885C28.9009 42 29.4431 41.5759 29.6076 40.9688L30.5217 37.5873H33.2534L34.2502 40.9958C34.4216 41.5869 34.9609 42 35.5616 42H39.6318C40.063 42 40.4748 41.786 40.7357 41.4259C40.9898 41.0689 41.0667 40.6018 40.9401 40.1767L35.7514 22.9891C35.5723 22.3971 35.0475 22 34.4449 22H29.4801C28.8746 22 28.3479 22.4001 28.1707 22.9951L23.0589 40.1837C22.9333 40.6058 23.0112 41.0709 23.2682 41.4319C23.5271 41.788 23.9379 42 24.3673 42Z" fill="black"/>
                          <path d="M31.6306 33H33.369C33.5682 33 33.7558 32.9129 33.8738 32.7647C33.9937 32.6174 34.0304 32.4261 33.9743 32.2492L33.1902 29.7688C33.1554 29.6565 33.1186 29.5424 33.0828 29.4248C33.0045 29.1706 32.7406 28.9991 32.4669 29C32.1817 29.0036 31.9352 29.185 31.8655 29.4419C31.8269 29.5784 31.7901 29.7122 31.7505 29.8406L31.0234 32.2564C30.9702 32.4324 31.0089 32.6219 31.1278 32.7683C31.2467 32.9138 31.4333 33 31.6306 33" stroke="black"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg></div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="black"/>
                          </g>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M22.1925 38.3488C22.2113 38.3535 22.2302 38.3582 22.2483 38.3621L23.7799 36.2433C23.8059 36.2237 23.8311 36.201 23.8531 36.1752L25.6035 34.1746C25.7239 34.3945 25.8915 34.5612 26.1032 34.6724C26.8761 35.0755 27.8386 34.4736 27.9464 34.4039C27.9645 34.3914 27.9819 34.3781 27.9992 34.364C28.5713 33.8693 28.8366 33.802 28.9106 33.7942C29.0302 33.9859 29.005 34.7295 28.8547 35.3737C28.8476 35.4034 28.8429 35.4332 28.8413 35.4629C28.798 36.3725 29.0349 37.0636 29.5449 37.5152C30.1808 38.078 31.0269 38.0522 31.3063 38.0256C32.2838 38.1923 32.9583 38.5445 33.3116 39.0744C33.6524 39.5855 33.6005 40.146 33.5714 40.3268L32.4372 42.127C32.4365 42.1278 32.4357 42.1278 32.4349 42.1286C31.965 42.5685 31.1709 43.5923 30.4374 42.9583C30.1131 42.6781 30.0942 42.1129 29.7165 41.8265C29.3843 41.5752 29.1278 41.5838 28.7272 41.5736C28.484 41.6621 28.2392 41.6613 27.9945 41.5697C27.693 41.6277 27.5238 41.5181 27.4845 41.241C27.3058 41.0625 27.3082 40.8606 27.1035 40.6813C26.81 40.4246 26.4558 40.362 26.0812 40.3596C25.8341 40.3581 25.5405 40.4849 25.2997 40.4457C24.2513 40.2751 24.7904 40.009 24.3324 39.6419C23.5666 39.0274 22.8339 39.274 22.0382 39.6513C22.0217 39.6591 22.0051 39.6669 21.9886 39.6748C21.9863 39.6591 21.9847 39.6442 21.9831 39.6294C21.9201 39.1965 21.9123 38.777 22.1925 38.3488ZM30.3154 29.1753L37.1248 34.0321L34.3497 38.9163C34.3222 38.8552 34.2923 38.7934 34.2584 38.7324C34.2254 38.6705 34.1884 38.6087 34.1482 38.5476C34.0821 38.4459 34.0082 38.3496 33.9279 38.2572C33.8507 38.168 33.7681 38.0843 33.6792 38.0036C33.2746 37.6373 32.7418 37.3626 32.0839 37.1849C31.8651 37.1246 31.6313 37.0761 31.385 37.0378C31.3598 37.0339 31.3346 37.0323 31.3094 37.0323C31.2811 37.0323 31.2528 37.0346 31.2252 37.0393C31.2252 37.0393 31.2221 37.0401 31.2166 37.0409C31.2055 37.0417 31.1851 37.044 31.1575 37.0464C31.1434 37.0472 31.1276 37.0479 31.1103 37.0487C31.0922 37.0495 31.0733 37.0503 31.0529 37.0503C30.9907 37.0511 30.9159 37.0487 30.8341 37.0393C30.6814 37.0205 30.5067 36.9775 30.3492 36.8859C30.2973 36.8554 30.2461 36.8186 30.1989 36.7763C30.1407 36.7247 30.0895 36.6644 30.0455 36.5963C29.9345 36.4257 29.8707 36.1995 29.844 35.9294C29.8385 35.8762 29.8298 35.8261 29.8282 35.7682C29.8267 35.7001 29.8274 35.6296 29.8306 35.5569C29.8306 35.5553 29.8298 35.5545 29.8306 35.5529C29.8337 35.5373 29.8385 35.5169 29.8416 35.4997C29.8589 35.4222 29.8778 35.3299 29.8967 35.2234C29.8975 35.2179 29.8991 35.2117 29.8999 35.2054C29.9054 35.1741 29.9101 35.1397 29.9148 35.1076C29.9211 35.07 29.9274 35.0356 29.9329 34.9949C29.9841 34.6411 29.9927 34.3452 29.9738 34.0979C29.9644 33.9703 29.9471 33.8552 29.9243 33.7527C29.8574 33.4505 29.7432 33.251 29.6307 33.1195C29.5551 33.0326 29.4804 32.9762 29.4206 32.9402C29.2545 32.84 29.0782 32.8001 28.8995 32.8056C28.8106 32.8079 28.7201 32.8212 28.6304 32.8447C28.2251 32.9457 27.8205 33.229 27.4868 33.5046C27.449 33.5351 27.4128 33.5656 27.3782 33.5961C27.3514 33.6118 27.3215 33.629 27.2893 33.6454C27.1933 33.6963 27.0744 33.7464 26.9579 33.7816C26.9194 33.7934 26.8808 33.8028 26.8438 33.8106C26.806 33.8184 26.7706 33.8239 26.736 33.8263C26.7021 33.8286 26.6699 33.8278 26.6408 33.8239C26.6116 33.8192 26.5857 33.8122 26.5636 33.7996C26.4881 33.7613 26.407 33.6141 26.3732 33.3277L30.3154 29.1753ZM34.9463 26.9532C35.025 26.9172 35.0927 26.8624 35.1431 26.7919L39.6834 20.5067C39.7881 20.4252 40.0832 20.2123 40.4469 20.0863C40.5374 20.055 40.6326 20.0292 40.7302 20.0112C40.7806 20.0026 40.8309 19.9963 40.8813 19.9932C41.1292 19.9744 41.3858 20.0221 41.6219 20.1896C41.6329 20.1967 41.6431 20.203 41.6542 20.2092C41.6557 20.2108 41.6573 20.2116 41.6589 20.2131C41.6612 20.2147 41.6636 20.217 41.666 20.2186C41.6715 20.2225 41.6762 20.2257 41.6801 20.2288C41.6896 20.2366 41.6998 20.2444 41.7108 20.253C41.7966 20.3149 41.8667 20.3853 41.9257 20.4605C41.98 20.5309 42.0233 20.6061 42.0587 20.6851C42.15 20.8886 42.183 21.1125 42.1807 21.3269C42.1807 21.3293 42.1807 21.3309 42.1807 21.3332C42.1791 21.4224 42.1728 21.5085 42.1626 21.5923C42.1461 21.7277 42.1201 21.8522 42.0949 21.9539C42.0689 22.0557 42.043 22.1355 42.0272 22.1832L37.4876 28.4677C37.4294 28.5476 37.3971 28.6438 37.3947 28.7432L37.3003 32.9457L33.2644 30.0668L31.2457 28.6274L34.9463 26.9532ZM21.1386 40.3847C21.1811 40.7588 21.5109 40.9647 21.8627 40.7988C22.1767 40.65 22.9921 40.0818 23.3415 40.1914C23.7516 40.3197 23.7043 40.6125 23.9428 40.8528C24.2742 41.1862 24.4977 41.3733 24.9966 41.4132C25.2997 41.4367 25.6365 41.2762 25.9285 41.3224C26.7572 41.4523 26.5699 41.7873 26.9131 42.2178C27.2058 42.5865 27.5388 42.7055 28.0055 42.6906C28.4273 42.6765 28.5619 42.527 28.9893 42.7321C29.4449 42.9497 29.4095 43.1853 29.6897 43.5602C29.9416 43.8991 30.2123 44.1355 30.6491 44.2013C31.6416 44.35 32.4695 43.4099 33.1157 42.8057C33.1668 42.7571 33.2022 42.7055 33.2266 42.653C33.2392 42.6577 33.251 42.664 33.2644 42.6679L34.4583 40.7745C34.4851 40.7314 34.5048 40.6853 34.5174 40.6375C34.5182 40.6344 34.5205 40.625 34.5237 40.6125L38.2054 34.1315C38.2227 34.101 38.2353 34.0697 38.2463 34.0368C38.2479 34.0305 38.2495 34.0235 38.2503 34.0165C38.2597 33.9836 38.2652 33.9507 38.2668 33.917C38.2668 33.9116 38.2691 33.9061 38.2691 33.9006L38.3809 28.9178L42.8701 22.703C42.8929 22.6717 42.9126 22.6372 42.9268 22.6004C42.9614 22.5167 43.7414 20.5505 42.3326 19.4852C42.3271 19.4797 42.3208 19.475 42.3153 19.4703C42.298 19.4562 42.2806 19.4445 42.261 19.4304C42.2507 19.4226 42.2413 19.4155 42.2311 19.4093C42.2177 19.3991 42.2051 19.3897 42.1909 19.3803C42.1775 19.3709 42.1642 19.3623 42.15 19.3545C40.6869 18.3729 39.0664 19.7349 38.9971 19.7936C38.9672 19.8186 38.9405 19.8476 38.9177 19.8789L34.4158 26.111L30.1383 28.0466C30.047 28.0678 29.9605 28.1147 29.892 28.1867L25.5853 32.7234C25.5515 32.7469 25.5177 32.7719 25.4901 32.804L23.1999 35.4214C23.1463 35.4551 23.0991 35.4981 23.0598 35.5522L21.4849 37.7328C21.4416 37.7657 21.3999 37.8056 21.3653 37.8581C21.3181 37.9293 21.2787 37.9997 21.2417 38.0686L21.2055 38.1203C21.2087 38.1203 21.2118 38.1211 21.215 38.1218C20.8474 38.867 21.0418 39.53 21.1386 40.3847Z" fill="white"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>

                        </div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M20 44.125H44V41H38.1681L32 42.1229L26.1327 41H20V44.125Z" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M29.2102 16.6126L34.6445 21V29.1513H40L32 38.4086L24 29.285H29.2102V16.6126Z" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>
                        </div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path d="M42 32.5H23.0373" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M30 41L23 32.4992L30 24" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>
                        </div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path d="M23 32.5H41.9627" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M35 24L42 32.5008L35 41" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>
                        </div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path d="M25.4474 33.6772L22.1058 36.4811" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M28.6305 34.9225L22.5021 40.0648" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M32.0909 35.935L22.1323 44.2913" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M44.3472 21.7607L32.6723 21.7404L35.4452 25.0451L27.9257 31.3547L34.4312 34.4239L39.6444 30.0495L42.3141 33.2311L44.3472 21.7607Z" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>
                        </div>

                        <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                          <svg width="54" height="54" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <g filter="url(#filter0_d)">
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32 53C43.598 53 53 43.598 53 32C53 20.402 43.598 11 32 11C20.402 11 11 20.402 11 32C11 43.598 20.402 53 32 53Z" fill="white"/>
                          </g>
                          <path fill-rule="evenodd" clip-rule="evenodd" d="M32.5 33.5182L27.75 38.2682C27.3351 38.6832 26.8056 38.8264 26.5674 38.5882C26.3292 38.35 26.4724 37.8205 26.8873 37.4056L31.6373 32.6556L26.7318 27.75C26.3168 27.3351 26.1736 26.8056 26.4118 26.5674C26.65 26.3292 27.1795 26.4724 27.5944 26.8873L32.5 31.7929L37.4056 26.8873C37.8205 26.4724 38.35 26.3292 38.5882 26.5674C38.8264 26.8056 38.6832 27.3351 38.2682 27.75L33.3627 32.6556L38.1127 37.4056C38.5276 37.8205 38.6708 38.35 38.4326 38.5882C38.1944 38.8264 37.6649 38.6832 37.25 38.2682L32.5 33.5182Z" fill="black"/>
                          <defs>
                          <filter id="filter0_d" x="0" y="0" width="64" height="64" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
                          <feOffset/>
                          <feGaussianBlur stdDeviation="5.5"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
                          </filter>
                          </defs>
                          </svg>
                        </div>

                          <!-- <div data-toggle="tooltip" data-placement="left" title="Close" class="canvas-btn close-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-times"></i></div>

                          <div data-toggle="tooltip" data-placement="left" title="Download as .Jpeg" class="download-pic canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-download"></i></div>

                          <div data-toggle="tooltip" data-placement="left" title="Shift + Ctrl + Z (Redo)" class="redo canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-redo"></i></div>

                          <div data-toggle="tooltip" data-placement="left" title="Ctrl + Z (Undo)" class="undo canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-undo"></i></div>

                          <div class="settings-btn border rounded bg-light text-dark p-1 px-md-3 px-2 m-1">
                              <i class="fas fa-cog"></i>
                              <span data-container="body" data-toggle="popover" data-placement="bottom" data-content=".."></span>
                          </div>

                          <div data-toggle="tooltip" data-placement="left" title="Done" class="share-btn canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-share"></i></div> -->

                      </div>
                  </div>

              </div>

          </div>

          <div id="dialog-share" class="container d-flex align-items-center justify-content-center">

              <div class="col-lg-4 col-md-6 col-sm-8 col-12 bg-dark rounded p-3 text-light bg-shadow">

                  <form id="share-form" method="post" action="http://localhost/themepic/save_photo.php" novalidate>

                      <div class="form-group">

                          <div class="d-flex justify-content-between align-items-center">

                              <label for="in-title">Title <span class="text-muted">(Optional)</span></label>

                              <small class="text-warning pl-2 text-right"><label for="in-title" generated="true" class="error"></label></small>

                          </div>

                          <input name="in-title" type="text" class="form-control" id="in-title" aria-describedby="emailHelp" placeholder="Fall of titans">

                          <div class="pt-1">

                              <small class="text-muted">Title is recommended as it will help you find your notes easily</small>

                          </div>

                      </div>

                      <div class="form-group">

                          <label for="in-link">Your Link</label>

                          <div class="p-2 bg-white rounded">
                              <div class="d-none"><i class="far fa-copy"></i></div>
                              <code id="link2page" class="text-dark"></code>
                          </div>

                          <div class="pt-1">

                              <small class="text-muted">Visible to you only till you publish</small>

                          </div>

                      </div>

                      <button type="button" class="publish-btn btn btn-info">Publish</button>
                      <button type="button" class="edit-btn btn btn-outline-light">Edit</button>

                      <div class="position-absolute text-right" style="right:20px; bottom:20px; z-index: 12">
                        <small class="saving badge badge-pill badge-light saving-data shadow d-none">saving data <span>.</span><span>.</span><span>.</span> </small>
                        <small class="saving badge badge-pill badge-light saving-image d-none">saving image <span>.</span><span>.</span><span>.</span></small>
                        <small class="saving badge badge-pill badge-light saving-thumbnail d-none">saving thumbnail <span>.</span><span>.</span><span>.</span></small>
                        <small class="badge badge-pill badge-success saving-done saving-badge"><i class="fas fa-check-circle"></i> Saved</small>
                      </div>

                  </form>

              </div>

          </div>

        </div>

        <img class="image-for-storage position-absolute" id="blah" src="" alt="" style="top: -9999px; left: -9999px; opacity: 0">
        <img class="thumbnail position-absolute" id="" src="" alt="" style="top: -9999px; left: -9999px; opacity: 0">

        <canvas id="canvas-for-storage" style="top: -9999px; left: -9999px; opacity: 0"></canvas>

        <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
        <script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.7/jquery.validate.min.js"></script>
        <script src="http://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.0/additional-methods.js"></script>
        <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>

        <script type="text/javascript">

        $(document).ajaxStop(function() {
          $('.saving-done').removeClass('d-none');
        });

        $( document ).ajaxStart(function(e) {
          $('.saving-done').addClass('d-none');
        });

            var canvas = document.getElementById('myCanvas');
            var context = canvas.getContext('2d');
            let circleAndNo = $('.circleAndNo:eq(-1)').hide();
            let clicking = false;
            let x;
            let sliderValue = 50;
            let fitcanvas = fitToContainer(canvas);
            let markerOnCanvasClicked = false;
            let oneInProgress = false;
            let sliderVal = $('.slider').val();
            let mouseEnteredPopOverAlready = false;
            let eventSequence = new Array();

            let wht = $(window).height();
            let wwt = $(window).width();

            let undoNredo = new command();

            let allFunctions = [];

            let undoneFunctions = [];

            function command(instance) {

                this.DOMelem = '';
                this.data1 = '';
                this.arrayData = [];
                this.arrayData2 = [];
                this.undoresult = [];
                this.freshresults = [];
                this.executedResult = '';

                this.executeInCommand = function execute(DOM, data1, data2) {

                    this.DOMelem = DOM
                    this.data1 = data1;
                    this.arrayData.push(data2);
                    allFunctions.push(instance);
                    this.executedResult = instance.execute(DOM, data1, data2);

                };

                this.undoInCommand = function undo() {

                    if (!(allFunctions.length)) return console.log('no function in undo array');
                    var command = allFunctions.pop();
                    undoneFunctions.push(command);
                    circleAndNo.hide().css({
                        opacity: 1
                    });
                    return command.undo();


                };

                this.redoInCommand = function redo() {

                    if (!(undoneFunctions.length)) return console.log('no function in redo array');
                    var command = undoneFunctions.pop();
                    allFunctions.push(command);
                    circleAndNo.hide().css({
                        opacity: 1
                    });
                    return command.redo();

                };

            }

            function fitToContainer(canvas) {
                //				Make it visually fill the positioned parent
                canvas.style.width = '100%';
                canvas.style.height = '100%';
                // 				...then set the internal size to match
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
            }

            function getMousePos(canvas, evt) {
                var rect = canvas.getBoundingClientRect();

                return {
                    x: evt.clientX - rect.left,
                    y: evt.clientY - rect.top
                };
            }

            function storeEvent() {

                let oldVisibleDOM = $.grep($('.detailBox'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    }

                })

                let oldVisibleBigDOM = ($.grep($('.detailBox-Big'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    }

                }))

                eventSequence.push({

                    event: 'Last Small Box Position or Big Box',
                    oldPosnElem: $(oldVisibleDOM[0]).css(['top', 'right', 'bottom', 'left']) || oldVisibleBigDOM[0]

                })

                return eventSequence;

            }

            $(document).ready(function() {

                wht = $(window).height();
                wwt = $(window).width();

                $('.saving-div').css({width:wwt,height:wht});

                $('.btn-container').height(wht);

                $('.upload-image-box').height(wht / 1.5);

                $('[data-toggle="popover"]').popover({

                    animation: true,

                });

                $('[data-toggle="tooltip"]').tooltip();

                $("#dialog-final").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center top",
                        at: "center top",
                        of: window
                    },
                    //					modal: true,
                    autoOpen: false,
                    appendTo: ".mainPage",
                    show: {
                        effect: "fade",
                        duration: 500
                    },
                })

                $("#dialog-uploadImage").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center",
                        at: "center",
                        of: window
                    },
                    modal: true,
                    autoOpen: false,
                    appendTo: ".mainPage",
                    show: {
                        effect: "fade",
                        duration: 500
                    }
                });

                $("#dialog-share").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center",
                        at: "center",
                        of: window
                    },
                    modal: true,
                    autoOpen: false,
                    appendTo: ".mainPage",
                    show: {
                        effect: "fade",
                        duration: 500
                    }
                });

            })

            $(window).resize(function() {

                wht = $(window).height();
                wwt = $(window).width();

                $('.mainPage').height(wht);

                $('.image').css({
                    'max-height': wht / 1.1,
                    'max-width': '100%'
                });

                let imgWt = $('.image').width();
                let imgHt = $('.image').height();

                $('.carry-menu').height(imgHt);

                if (wwt < 767) {

                    $('.carry-menu').height('auto');

                }

                $('#overlay').css({
                    height: imgHt,
                    width: imgWt
                });

                $('.detailBox-Big').css({
                    width: imgWt + 2
                });

                $('.circleAndNo').each(function(key, value) {

                    if ($(this).data().percentX) {

                        let percent = $(this).data();

                        $('.circleAndNo:eq(' + key + ')').css({
                            left: percent.percentX * $('#myCanvas').width() + $('#overlay').position().left,
                            top: percent.percentY * $('#myCanvas').height(),
                            'font-size': percent.mFontSize * $('#myCanvas').width(),
                            height: percent.mHeight * $('#myCanvas').width(),
                            width: percent.mWidth * $('#myCanvas').width()
                        })

                    }

                })

                $("#dialog-final").dialog("option", "position", {
                    my: "center top",
                    at: "center top",
                    of: window
                });

                $("#dialog-share").dialog("option", "position", {
                    my: "center",
                    at: "center",
                    of: window
                });

                $("#dialog-uploadImage").dialog("option", "position", {
                    my: "center",
                    at: "center",
                    of: window
                });

            })



            canvas.addEventListener('mousemove', function(evt) {

                if (oneInProgress) {

                    $('#myCanvas').css({
                        'cursor': 'not-allowed'
                    });
                    return;

                };

                $('#myCanvas').css({
                    'cursor': 'copy'
                })

                circleAndNo.show();

                var mousePos = getMousePos(canvas, evt);

                let leftOfCanvas = $('#overlay').position().left;

                circleAndNo.css({
                    top: mousePos.y,
                    left: leftOfCanvas + mousePos.x
                });

                let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                    if ($(item).css('display') != 'none') {
                        return item;
                    };

                })

                circleAndNo.children('elem').html(visibleCircles.length);

            }, false); // MOVE ON CANVAS

            function getEditFormatOfPopover() {

                return `
<h6 class="">Add Comment</h6>

<textarea rows="3" class="popTextArea px-2 w-100 border border-dark rounded text-dark" placeholder="It happened before summers... (min 5 characters)"></textarea>

<div class="d-flex justify-content-between align-items-center">

<span class="deletecircleAndNo text-center"><i class="fas fa-times px-2"></i></span>
<button class="popBtn btn btn-sm btn-dark no-active" disabled>Save</button>

            </div>
`;

            }

            let createEditablePopover = new command({

                execute: function() {

                    let circleNo = createEditablePopover.DOMelem;

                    $(circleNo).data({
                        editFlag: true
                    }).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('hover-pop custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    createEditablePopover.freshresults.push(circleNo);

                    eventSequence.push({
                        event: 'editable popover created',
                        markerDOM: circleNo
                    })

                    oneInProgress = true;

                    console.log('Editable popover is created');

                },

                undo: function() {

                    let circleNo = createEditablePopover.freshresults.pop();

                    createEditablePopover.undoresult.push(circleNo);

                    $(circleNo).data({
                        editFlag: false
                    }).children('span').popover('hide');

                    oneInProgress = false;

                    return 'editable pop up hides';

                },

                redo: function() {

                    let circleNo = createEditablePopover.undoresult.pop();

                    createEditablePopover.freshresults.push(circleNo);

                    $(circleNo).data({
                        editFlag: true
                    }).children('span').popover('show');;

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('hover-pop custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    oneInProgress = true;

                    undoNredo.redoInCommand();

                    return 'editable pop up shows';

                }

            })

            let markerCreated = new command({

                execute: function() {

                    let DOM = markerCreated.DOMelem;
                    let event = markerCreated.data1;

                    circleAndNo.clone().prependTo('#for-printing');

                    let mousePos = getMousePos(DOM, event);
                    let percentX = mousePos.x / $(DOM).width();
                    let percentY = mousePos.y / $(DOM).height();
                    let mFontSize = $('.circleAndNo:eq(0)').css('font-size').slice(0, -2) / $(DOM).width();
                    let mHeight = $('.circleAndNo:eq(0)').height() / $(DOM).width();
                    let mWidth = $('.circleAndNo:eq(0)').width() / $(DOM).width();

                    $('.circleAndNo:eq(0)').css({
                        'z-index': 4
                    }).data({
                        'percentX': percentX,
                        'percentY': percentY,
                        'mFontSize': mFontSize,
                        'mHeight': mHeight,
                        'mWidth': mWidth
                    });

                    let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                        if ($(item).css('display') != 'none') {
                            return item;
                        };

                    })

                    circleAndNo.children('elem').html(visibleCircles.length);

                    markerCreated.freshresults.push($('.circleAndNo:eq(0)')[0]);

                    eventSequence.push({
                        event: 'marker created',
                        markerDOM: $('.circleAndNo:eq(0)')[0]
                    })

                    console.log('circle:eq(0) is created');

                    return $('.circleAndNo:eq(0)')[0];

                },

                undo: function() {

                    let circleNo = markerCreated.freshresults.pop();

                    markerCreated.undoresult.push(circleNo);

                    $(circleNo).hide();

                    reDrawCanvasMarkers();

                    store_circle_data();

                    return 'circle on canvas is hide()';

                },

                redo: function() {

                    let circleNo = markerCreated.undoresult.pop();

                    markerCreated.freshresults.push(circleNo);

                    $(circleNo).show();

                    reDrawCanvasMarkers();

                    oneInProgress = true;

                    return 'circle on canvas is show()'

                }

            })

            function reDrawCanvasMarkers() {

                let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    };

                })

                let totalMarkersOnCanvas = visibleCircles.length;

                $.each(visibleCircles, function(key, value) {

                    $(this).children('elem').html(totalMarkersOnCanvas - key)

                })

                $('.circleAndNo').last().children('elem').html(totalMarkersOnCanvas + 1);

                return true;

            }

            canvas.addEventListener('mousedown', function(evt) {

                if (oneInProgress) {
                    return
                };

                markerCreated.executeInCommand(this, evt);

                let circleNo = markerCreated.executedResult;

                createEditablePopover.executeInCommand(circleNo);

            }, false); // MARKER PLOTTING IN CANVAS

            canvas.addEventListener('mouseleave', function(evt) {

                circleAndNo.hide();

            });

            $(document).on('mouseenter mouseleave', '.circleAndNo', function(e) {

                $(this).toggleClass('bg-dark').toggleClass('bg-light');

                if ($(this).data().editFlag || !($(this).data().comment)) {
                    return
                };

                $(this).children().popover('toggle');

                console.log('2 circle mouseenter');

                $('.popover:eq(-1)').addClass('hover-pop custom-dark-popover bg-dark');

                let elem = `
<div class="text-here p-2 w-100 bg-dark rounded text-light">` + $(this).data('comment') + `</div>
<div class="px-2"><small class="text-muted notify-in-pop py-2 text-light text-left">Press to edit or delete</small></div>
`;

                $('.popover-body:eq(-1)').html(elem);

                if (oneInProgress) {

                    $('.notify-in-pop').html('An edit is open');

                }

            })

            $(document).on('shown.bs.popover', '.circleAndNo', function(e) {

                let el = $('.popover:eq(-1)').css('transform');

                function getTransform(el) {

                    var results = el.match(/matrix(?:(3d)\(\d+(?:, \d+)*(?:, (\d+))(?:, (\d+))(?:, (\d+)), \d+\)|\(\d+(?:, \d+)*(?:, (\d+))(?:, (\d+))\))/)

                    if (!results) return [0, 0, 0];
                    if (results[1] == '3d') return results.slice(2, 5);
                    results.push(0);
                    return results.slice(5, 8);

                }

                let popHeight = parseInt(getTransform(el)[1], 10) + $('.popover:eq(-1)').height();

                console.log('popHt: ' + popHeight,
                            'popTop: ' + getTransform(el)[1],
                            'circleTop: ' + $(this).css('top'));

                if (popHeight >= $(document).height() * 0.9) {

                    $('.custom-dark-popover .arrow').remove();

                }

                $('#dynamic').remove();

                let popId = '#' + $(this).find('span').attr('aria-describedby');

                console.log($(popId).last().attr('x-placement'));

                if ($(popId).last().attr('x-placement') == 'bottom') {

                    $("<style type='text/css' id='dynamic' />").appendTo("head");

                    $("#dynamic").text(`

.custom-dark-popover .arrow::after {


border-bottom-color: #343a40;


}`

                                      );

                } else {

                    $("<style type='text/css' id='dynamic' />").appendTo("head");

                    $("#dynamic").text(`

.custom-dark-popover .arrow::after {


border-top-color: #343a40;


}`

                                      );

                }


            })

            $(document).on('click', '.circleAndNo', function() {

                if (oneInProgress) {
                    return
                };

                createEditablePopover.executeInCommand(this);

                placeCircleDatainTextArea($(this).data().comment);

            })

            function placeCircleDatainTextArea(comment) {

                $('.popTextArea:eq(-1)').html(comment);

                if ($('.popTextArea:eq(-1)').val().length > 4) {

                    $('.popBtn:eq(-1)').removeAttr('disabled', 'disabled');

                }

                console.log('data placed in the text area');

            }

            $(document).on('keyup', '.popTextArea', function() {

                if (!(($(this).val().length) >= 5)) {

                    $('.popBtn').attr('disabled', 'disabled');

                    return

                }

                $('.popBtn').removeAttr('disabled');

            })

            let dataAmendinPop = new command({

                execute: function(DOMelem) {

                    dataAmendinPop.freshresults.push($(DOMelem).data().comment);

                    console.log('data amended in text area');

                    return true;

                },

                undo: function() {

                    let currentData = $('.popTextArea').val();

                    dataAmendinPop.undoresult.push(currentData);

                    let oldData = dataAmendinPop.freshresults.pop();

                    if (!oldData) {

                        undoNredo.undoInCommand();

                        return 'No data found so cleared the textarea';

                    }

                    $('.popTextArea').val(oldData);

                    $('.popBtn').removeAttr('disabled');

                    return 'Old value replaced in textarea';

                },

                redo: function() {

                    let currentData = $('.popTextArea').val();

                    if (currentData) {

                        dataAmendinPop.freshresults.push(currentData);

                    }

                    let newData = dataAmendinPop.undoresult.pop();

                    $('.popTextArea').val(newData);

                    $('.popBtn').removeAttr('disabled');

                    return 'New value placed in textarea';

                }


            })

            let popGoesHidden = new command({

                execute: function(DOMelem, notReq, newData) {

                    let circleNo = $('[aria-describedby="' + $(DOMelem).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                    oneInProgress = false;

                    $(circleNo).data({
                        comment: newData,
                        editFlag: false
                    }).children('span').popover('hide');

                    circleAndNo.css({
                        opacity: 1
                    });

                    popGoesHidden.freshresults.push(circleNo);

                    console.log('Data saved in circle and popover goes hidden');

                    return true;

                },

                undo: function() {

                    let circleNo = popGoesHidden.freshresults.pop();

                    popGoesHidden.undoresult.push(circleNo);

                    let prvsData = popGoesHidden.arrayData.pop();

                    popGoesHidden.arrayData2.push(prvsData);

                    console.log('prvs Data', popGoesHidden.arrayData);

                    $(circleNo).data({
                        comment: prvsData,
                        editFlag: true
                    }).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    placeCircleDatainTextArea(prvsData);

                    oneInProgress = true;

                    return 'Popover editable format is opened now';

                },

                redo: function() {

                    oneInProgress = false;

                    let circleNo = popGoesHidden.undoresult.pop();

                    popGoesHidden.freshresults.push(circleNo);

                    let prvsData = popGoesHidden.arrayData2.pop();

                    popGoesHidden.arrayData.push(prvsData);

                    $(circleNo).data({
                        comment: prvsData,
                        editFlag: false
                    }).children('span').popover('hide');

                    store_circle_data();

                    return 'Popover goes hide';


                }

            })

            let givedatatotextbox = function() {

                let comments = new Array();

                let smallelem = ``;
                let bigelems = ``;

                $.each($('.circleAndNo'), function(key, value) {

                    if ($(this).data().comment && $(this).css('display') != 'none') {

                        comments[$(this).find('elem').html() - 1] = $(this).data().comment;

                    }

                })

                let needColAdjustments = false;

                $('.detailBox-Big').find('.rounded-bottom').children().remove();

                $('.detailBox').children().remove();

                $.each(comments, function(key, value) {

                    smallelem = `<span class="small-elem border-right px-1">` + (key + 1) + `</span>`;

                    bigelems = `<div class="big-text-here col-md-4 col-sm-6 col-12 text-left p-2">
<span class="badge badge-light">` + (key + 1) + `</span>
<small>` + value + `</small>
            </div>`;

                    $('.detailBox').append(smallelem);

                    $('.detailBox-Big').find('.rounded-bottom').append(bigelems);

                    $('.big-text-here').last().data({
                        textLength: value.length,
                        textBlock: Math.floor(key / 3)
                    });

                    if (value.length > 125) {

                        needColAdjustments = true;

                    }

                })

                $('.small-elem:eq(-1)').removeClass('border-right');

                if (!needColAdjustments) {

                    return;

                }

                needColAdjustments = false;

                let spaceAval = 12;
                let rowNo = 0;
                let rowAlloted = 0;
                let cArray = [];
                let rowArray = [];

                $.each($('.big-text-here'), function(key, value) {

                    let currentBlock = $(value).data().textBlock;

                    let sumLength = 0;

                    let totalSize = $.grep($('.big-text-here'), function(item) {

                        if ($(item).data().textBlock == currentBlock) {

                            sumLength += $(item).data().textLength;

                        }

                    });

                    let ownPercent = $(value).data().textLength / sumLength * 100;

                    let ineed = function() {

                        if (ownPercent <= 60) {

                            return 4;

                        }

                        if (ownPercent <= 90) {

                            return 8;

                        }

                        if (ownPercent <= 100) {

                            return 12;

                        }

                    }

                    let giveSpace = function(needed, item) {

                        if (needed <= spaceAval) {

                            spaceAval = spaceAval - needed;

                            cArray.push(item);

                            return rowNo;

                        }

                        cArray = [];

                        rowNo = rowNo + 1;

                        spaceAval = 12;

                        return giveSpace(needed, item);

                    }

                    let needed = ineed();

                    rowAlloted = giveSpace(needed, $(this));

                    $(this).data({
                        neededSpace: needed,
                        rowAlloted: rowAlloted
                    });

                    rowArray[rowAlloted] = cArray;

                });

                $.each(rowArray, function(key, value) {

                    let className = function() {

                        if (value.length == 1) {

                            value[0].toggleClass('col-md-4 col-md-12 col-sm-6 col-sm-12');

                            return 'col-md-12';

                        }

                        if (value.length == 3) {

                            value[2].toggleClass('col-sm-6 col-sm-12');
                            return 'col-md-4';

                        }

                        if (value.length == 2) {

                            if (value[0].data().neededSpace == value[1].data().neededSpace) {

                                value[0].toggleClass('col-md-4 col-md-6');
                                value[1].toggleClass('col-md-4 col-md-6');

                                return 'col-md-6 col-md-6';

                            }

                            if (value[0].data().neededSpace == 8) {

                                value[0].toggleClass('col-md-4 col-md-8');

                                return 'col-md-8 col-md-4';

                            }

                            value[1].toggleClass('col-md-4 col-md-8');

                            return 'col-md-4 col-md-8';


                        }

                    }

                    //					console.log(className());

                    className();

                })

            }

            $(document).on('mouseenter mouseleave', '.small-elem', function() {

                let serNo = parseInt($(this).html());

                let thisCircle = $.grep($('.circleAndNo'), function(item) {

                    return $(item).find('elem').html() == serNo;

                })

                $(thisCircle).trigger('mouseenter');

                $(this).toggleClass('bg-light text-dark');

            })

            $(document).on('mouseenter mouseleave', '.big-text-here', function() {

                let serNo = parseInt($(this).find('.badge').html());

                let thisCircle = $.grep($('.circleAndNo'), function(item) {

                    return $(item).find('elem').html() == serNo;

                })

                $(thisCircle).trigger('mouseenter');

                $(this).toggleClass('bg-light text-dark');

            })

            $(document).on('click', '.popBtn', function() {

                let oldData = $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo').data().comment;

                let newData = $('.popTextArea').val();

                if (oldData != newData) {

                    let circleNo = $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                    dataAmendinPop.executeInCommand(circleNo, false, false);

                    eventSequence.push({

                        event: 'data amended in textArea',
                        markerDOM: circleNo,
                        data: oldData

                    })

                }

                popGoesHidden.executeInCommand(this, false, newData);

                store_circle_data();

                eventSequence.push({

                    event: 'Edit Pop goes hidden',
                    markerDOM: $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo'),
                    data: newData

                })

            })

            $(document).on('mouseenter mouseleave', '.deletecircleAndNo', function() {

                $(this).toggleClass('border rounded text-light').siblings('.popBtn').toggleClass('btn-dark btn-light').closest('.popover').toggleClass('bg-dark text-light custom-dark-popover').find('.popTextArea').toggleClass('text-dark text-light bg-dark border-light border-dark').siblings('h6').toggleClass('text-light').parent('.popover');

                $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo').toggleClass('bg-dark bg-light');

            })

            let markerDeleted = new command({

                execute: function() {

                    let DOM = markerDeleted.DOMelem;

                    oneInProgress = false;

                    $('[aria-describedby="' + $(DOM).closest('.popover').attr('id') + '"]').closest('.circleAndNo').hide();

                    $(DOM).closest('.popover').remove();

                    reDrawCanvasMarkers();

                    return $('[aria-describedby="' + $(DOM).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                },

                undo: function() {

                    let circleAndNo = markerDeleted.executedResult;

                    oneInProgress = true;

                    $(circleAndNo).removeClass('bg-dark bg-light').show();

                    reDrawCanvasMarkers();

                    let comment = circleAndNo.data().comment;

                    $(circleAndNo).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    $('.circleAndNo:eq(0)').data({
                        editFlag: true
                    });

                    $('.popTextArea').val(comment);

                    if (comment && comment.length > 4) {

                        $('.popBtn').removeAttr('disabled');

                    }

                    return 'editable popover no entry yet';

                },

                redo: function() {

                    let circleAndNo = markerDeleted.executedResult;

                    oneInProgress = false;

                    $(circleAndNo).hide().children('span').popover('hide');

                    reDrawCanvasMarkers();

                    store_circle_data();

                    return 'marker deleted again';

                }

            })

            $(document).on('click', '.deletecircleAndNo', function() {

                eventSequence.push({
                    event: 'marker deleted',
                    markerDOM: $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo')
                });

                console.log(eventSequence);

                markerDeleted.executeInCommand(this, false);

                store_circle_data();

            })

            $(document).on('mouseenter mouseleave', '.canvas-btn', function() {

                $(this).toggleClass('bg-light text-dark');

            }) // SIDE BAR BUTTONS

            $(document).on('click', '.settings-btn', function() {

                mouseEnteredPopOverAlready = true;

                $(this).toggleClass('bg-light text-dark');

                let popId = '#' + $(this).children('span').popover('toggle').attr('aria-describedby');

                $(popId).children('.popover-header').html(`Setting's`).addClass('bg-dark custom-popover-header');

                $(popId).children('.arrow').css({
                    visibility: 'hidden'
                });

                let elem = `



<div class="pb-2 border-bottom d-flex justify-content-center flex-wrap align-items-center">

<div class="marker-circle rounded-circle bg-info text-light border-light d-flex align-items-center justify-content-center mx-1">1</div>
<div class="marker-circle rounded-circle bg-warning text-dark border-light d-flex align-items-center justify-content-center mx-1">2</div>
<div class="marker-circle rounded-circle bg-light text-dark border-light d-flex align-items-center justify-content-center mx-1">3</div>
<div class="marker-circle rounded-circle bg-dark border-light text-light d-flex align-items-center justify-content-center mx-1">4</div>
<div class="marker-circle rounded-circle bg-primary border-light text-light d-flex align-items-center justify-content-center mx-1">5</div>
<div class="marker-circle rounded-circle bg-danger border-light text-light d-flex align-items-center justify-content-center mx-1">6</div>
<div class="marker-circle rounded-circle bg-success border-light text-light d-flex align-items-center justify-content-center mx-1">7</div>


            </div>

<div class="py-3 border-bottom d-flex justify-content-center flex-wrap align-items-center">

<input class="slider w-100" type="range" min="1" max="100" value="50">

            </div>

<div class="py-2 text-center d-flex justify-content-center flex-wrap align-items-center">

<div class="w-100 d-flex">

<div class="box box-right-bottom border border-dark rounded mx-1">

<div class="rtbt-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-left-bottom border border-dark rounded mx-1">

<div class="ltbt-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-left-top border border-dark rounded mx-1">

<div class="lttp-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-right-top border border-dark rounded mx-1">

<div class="rttp-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-big-bottom border border-dark rounded mx-1">

<div class="bgbt-subBox w-100 bg-dark border rounded-bottom h-50 position-absolute"></div>

            </div>

            </div>

            </div>



`;
                $(popId).children('.popover-body').html(elem);

                let currentht = $('.circleAndNo').css('height');
                let fontSize = $('.circleAndNo').css('font-size');
                let fontWeight = $('.circleAndNo').css('font-weight');

                $('.marker-circle').css({
                    height: '1.7rem',
                    width: '1.7rem',
                    'font-size': '90%',
                    'font-weight': 'bold',
                    cursor: 'pointer'
                });

                $('.circleAndNo:eq(-1)').css({
                    top: '50%',
                    left: '50%'
                }).show();

                $('.slider').css({
                    cursor: 'pointer'
                });

                if (typeof sliderVal != 'undefined') {

                    $('.slider').val(sliderVal);

                } else {

                    $('.slider').val(50);

                }

                $(document)
                    .on('mouseenter', popId, function() {

                    mouseEnteredPopOverAlready = true;

                })
                    .on('mouseleave', popId, function() {

                    mouseEnteredPopOverAlready = false;
                    $('.settings-btn').toggleClass('bg-light text-dark');
                    $('.settings-btn').children('span').popover('hide')
                    $('.circleAndNo:eq(-1)').hide();

                })

            })

            let markerSizeChanged = new command({

                execute: function() {

                    sliderVal = $('.slider').val();

                    circleAndNo.css({
                        'font-size': sliderVal / 50 * 80 + '%',
                        'height': sliderVal / 50 * 1.7 + 'rem',
                        'width': sliderVal / 50 * 1.7 + 'rem'
                    });

                    let presentCircleDims = circleAndNo.css(['font-size', 'height', 'width']);

                    return true;

                },

                undo: function() {

                    let prvsSliderValue = markerSizeChanged.arrayData.pop();

                    //					$('.circleAndNo:eq(-1)').css({top:'50%',left:'50%'}).show();

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    circleAndNo.css(prvsSliderValue);

                    markerSizeChanged.undoresult.push(prvsSliderValue);

                    return 'Undo marker size';

                },

                redo: function() {

                    let prvsSliderValue = markerSizeChanged.undoresult.pop();

                    //					$('.circleAndNo:eq(-1)').css({top:'50%',left:'50%'}).show();

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    circleAndNo.css(prvsSliderValue);

                    markerSizeChanged.arrayData.push(prvsSliderValue);

                    return 'Redo marker size';

                }

            })

            $(document).on('change', '.slider', function() {

                eventSequence.push({

                    event: 'marker size changed',
                    markerDOM: circleAndNo,

                })

                console.log(eventSequence);

                let presentCircleDims = circleAndNo.css(['font-size', 'height', 'width']);

                markerSizeChanged.executeInCommand(false, false, presentCircleDims);



            })

            let markerThemeChanged = new command({

                execute: function() {

                    let DOMelem = markerThemeChanged.DOMelem;

                    let fullClassesNew = DOMelem.classList;

                    let foundClassesNew = $.grep(fullClassesNew, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesNew = foundClassesNew.join(' ');

                    let str = $('.circleAndNo').attr('class');

                    var fullClassesOld = str.split(' ');

                    let foundClassesOld = $.grep(fullClassesOld, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesOld = foundClassesOld.join(' ');

                    eventSequence.push({

                        event: 'bg- and text- changed',
                        oldClass: foundClassesOld,
                        newClass: foundClassesNew

                    })

                    console.log(eventSequence);

                    let combinedClassNames = foundClassesNew + ' ' + foundClassesOld;

                    $('.circleAndNo').toggleClass(combinedClassNames);

                    let classNames = {

                        old: foundClassesOld,
                        new: foundClassesNew

                    }

                    markerThemeChanged.freshresults.push(classNames);

                    console.log('fresh', markerThemeChanged.freshresults);

                    return combinedClassNames;

                },

                undo: function() {

                    let classes = markerThemeChanged.freshresults.pop();

                    console.log(classes);

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .removeClass(classes.new)
                        .addClass(classes.old)
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    markerThemeChanged.undoresult.push(classes);

                    console.log(markerThemeChanged.undoresult);

                },

                redo: function() {

                    let classes = markerThemeChanged.undoresult.pop();

                    console.log(markerThemeChanged.undoresult);

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .removeClass(classes.old)
                        .addClass(classes.new)
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    markerThemeChanged.freshresults.push(classes);

                }

            })

            $(document).on('click', '.marker-circle', function() {

                markerThemeChanged.executeInCommand(this);


            })

            $(document).on('click', '.box-right-top', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '',
                    right: '2%',
                    top: '2%',
                    bottom: ''
                }).attr({ctr:1});

            })

            $(document).on('click', '.box-left-top', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '2%',
                    right: '',
                    top: '2%',
                    bottom: ''
                }).attr({ctr:0});;

            })

            $(document).on('click', '.box-left-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '2%',
                    right: '',
                    top: '',
                    bottom: '2%'
                }).attr({ctr:2});;

            })

            $(document).on('click', '.box-right-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '',
                    right: '2%',
                    top: '',
                    bottom: '2%'
                }).attr({ctr:3});;

            })

            $(document).on('click', '.box-big-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox').attr({ctr:4}).hide().removeClass('d-flex')
                $('.detailBox-Big').show();

            })

            $(document).on('click', 'body', function() {

                if (mouseEnteredPopOverAlready) {
                    return
                };

                $('.settings-btn').children('span').popover('hide');

            })

            $(document).on('click', '.undo', function() {

                undoNredo.undoInCommand();

            })

            $(document).on('click', '.redo', function() {

                undoNredo.redoInCommand();

            })

            $(document).on('mouseleave', '.undo', function() {

                $('.circleAndNo:eq(-1)').css({
                    opacity: 1
                }).hide();

            })

            $(document).on('mouseleave', '.redo', function() {

                $('.circleAndNo:eq(-1)').css({
                    opacity: 1
                }).hide();

            })

            function printcommand(instance) {

                this.array = [];

                this.execute = function execute(bool_textreq) {

                    this.array.push(instance);
                    instance.execute(bool_textreq);

                }

                this.undo = function undo(instance) {

                    let command = this.array.pop();
                    command.undo();

                }

            }

            let printhidendisplay = new printcommand({

                execute: function(textreq) {

                    let imgWt = $('.image').width();

                    let elem = $('#for-printing').clone().addClass('custom-hide bg-dark');

                    $('body').append(elem);

                    $('.custom-hide').children('.image').width(imgWt);

                    if (!(textreq)) {

                        return $('.custom-hide').children('.detailBox-Big').remove();

                    }

                    $('.custom-hide').children('.detailBox').remove();

                },

                undo: function() {

                    $('.custom-hide').remove();

                }

            });

            $(document).on('click', '.download-pic', function(e) {

                let aTag = `<a class="aTag" style="display:none">Click Me</a>`;

                $('body').append(aTag);

                printhidendisplay.execute(true);

                let div = document.querySelector('.custom-hide');

                html2canvas(div, {

                    useCORS: true,
                    backgroundColor: 'null'

                }).then(function(drawnPic) {

                    let link = drawnPic.toDataURL('image/jpeg');

                    console.log('converted successfully');

                    $('.aTag:eq(0)').attr({
                        href: link,
                        download: 'newImage'
                    }).click();

                    printhidendisplay.undo();

                });

            })

            $(document).on('click', '.aTag', function(e) {

                this.click();
                this.remove();

            })

            $('.open-btn').click(function() {

                $('.btn-container').hide();

                $("#dialog-uploadImage").dialog('open');

            })

            $('.close-btn').click(function() {

                //				$('.btn-container').show();

                $("#dialog-final").dialog('close');

                window.location.reload(true);

            })

            let spinner = {

                start: function() {

                    let elem = `
<div class="modal-spinner">

<div class="d-flex h-100 align-items-center">
<div class="progress col-2 p-0 mx-auto" style="height: 0.4rem">
<div class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>
            </div>

            </div>`;

                    $('body').append(elem);

                },

                end: function() {

                    $('.modal-spinner').remove();

                }

            }

            $('.edit-btn').click(function() {

                $("#dialog-final").dialog('open');

                $("#dialog-share").dialog('close');

                $.post('http://localhost/themepic/store_plotting.php', {
                    delete: true
                }, function(result) {

                    console.log(result);

                });

            })

            $('.validate-image-exists').validate({

                rules: {
                    'image-link': {

                        required: true,
                        url: true,

                    }

                },
                messages: {

                    'image-link': {

                        required: '<i class="text-warning fas fa-exclamation-circle"></i> This url is required',
                        url: '<i class="text-warning fas fa-exclamation-circle"></i> a url looks just like a website e.g. "http://www.something.com"',

                    }

                }

            })

            $('.card').on('click', function() {

              let myArray = $(this).find('.draft-badge').attr('class').split(' ');

              if ($.inArray('Published', myArray) !== -1) {
                let picId = $(this).find('.card-image-top').attr('data-id');
                return window.location.assign(`/picture/${picId},{{token}}`);
              };

              spinner.start();

              let imageData = $(this).find('.card-image-top').attr('data-comments');
              let imageURL = $(this).find('.card-image-top').attr('data-image');
              let imageID = $(this).find('.card-image-top').attr('data-id');

              if (imageData) {
                dataforimageexists.status = true;
                dataforimageexists.data = JSON.parse(imageData);
              }

              $('.btn-container').css({opacity:0.2});
              $("#dialog-final").dialog('open');

              $('.image').attr({
                src: $(this).find('.card-image-top').attr('data-image'),
                firstLoad: false
              }).data({public_id: imageID});

              spinner.end();

            })

            let dataforimageexists = new Object();
            dataforimageexists.status = false;

            $('.image').on('load', function(e) {

                $(this).css({
                    'max-height': wht / 1.1,
                    'max-width': '100%'
                });

                let imgWt = $(this).width();
                let imgHt = $(this).height();

                if (imgHt < 0) return console.log('.image height is less then 0 so stopping resetting of canvas size.');

                $('.carry-menu').height(imgHt);

                if (wwt < 767 || imgHt < 300) {

                    $('.carry-menu').height('auto');

                }

                console.log('.image Load completed', imgHt, imgWt);

                $('#overlay').css({
                    height: imgHt,
                    width: imgWt
                });

                $('.detailBox-Big').css({
                    width: imgWt + 2
                });

                $('.detailBox').css({
                    right: '2%',
                    bottom: '2%'
                });

                spinner.end();

                console.log($(this).data().public_id);

                if (!($(this).data().public_id)) {

                    $('.saving-image').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                    let data = {
            					"query": 'uploadImage',
            					"token": `{{token}}`,
                      "status": "Draft",
                      "img": $(this).attr('src'),
            				};

            				data = JSON.stringify(data);

            				$.ajax({
            				    url: '/loggedin',
            				    type: 'post',
            				    data,
            				    headers: {
            				        'content-type': 'application/json',
            				    }
            					}).done((res) => {
            						console.log(res);
                        $(this).data({'public_id':res.public_id, 'thumbnail_saved': true});
                        update_image_table_db('save_draft');
                        $('.saving-image').addClass('d-none').animate({opacity: 1}, 500, 'linear');
            					}).fail((e) => {
            						console.log('ERROR', e.responseText);
            					});

                } else if ($(this).attr('firstLoad') === 'true') {

                  update_image_table_db('save_draft');

                };

                console.log(`Data for img exist: ${dataforimageexists.status}`);

                if (dataforimageexists.status) {

                    let elem = `<div class="circleAndNo rounded-circle bg-info text-light" ><span data-container="body" data-toggle="popover" data-placement="top" data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus."></span><elem>1</elem></div>`;

                    let obj = dataforimageexists.data;

                    $.each(obj, function(key, value) {

                        let newObj = value.data;

                        $('#for-printing').prepend(elem);

                        $('.circleAndNo:eq(0)').css({
                            'z-index': 4,
                            left: newObj.percentX * $('.image').width() + $('#overlay').position().left,
                            top: newObj.percentY * $('.image').height(),
                            'font-size': newObj.mFontSize * $('.image').width(),
                            height: newObj.mHeight * $('.image').width(),
                            width: newObj.mWidth * $('.image').width()
                        }).data({
                            'percentX': newObj.percentX,
                            'percentY': newObj.percentY,
                            'mFontSize': newObj.mFontSize,
                            'mHeight': newObj.mHeight,
                            'mWidth': newObj.mWidth,
                            comment: value.comment,
                            editFlag: false
                        }).find('elem').html(key+1);

                        $('.circleAndNo').removeClass().addClass(newObj.classs);

                    })

                    let fullClassesNew = $('.circleAndNo').attr('class').split(' ');

                    let foundClassesNew = $.grep(fullClassesNew, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesNew = foundClassesNew.join(' ');

                    givedatatotextbox();

                    dataforimageexists.status = false;

                };

            });

            $('.thumbnail').on('load', function() {

              var StorageCanvas = document.getElementById('canvas-for-storage');

              var ctx = StorageCanvas.getContext("2d");

              var img = $('.thumbnail')[0];

              ctx.drawImage(img, 0, 0);

              var MAX_WIDTH = 450;
              var MAX_HEIGHT = 2500;
              var width = img.width;
              var height = img.height;

              if (width > height) {
                  if (width > MAX_WIDTH) {
                      height *= MAX_WIDTH / width;
                      width = MAX_WIDTH;
                      console.log('thumbnail is now downsized - I.')
                  }
              } else {
                  if (height > MAX_HEIGHT) {
                      width *= MAX_HEIGHT / height;
                      height = MAX_HEIGHT;
                      console.log('thumbnail is now downsized - II.')
                  }
              };
              StorageCanvas.width = width;
              StorageCanvas.height = height;
              var ctx = StorageCanvas.getContext("2d");
              ctx.drawImage(img, 0, 0, width, height);
              var dataurl = StorageCanvas.toDataURL("image/png");

              let public_id = $('.image').data().public_id;

              $('.saving-thumbnail').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

              let data = {
                "query": 'uploadThumbnail',
                "public_id": public_id,
                "token": `{{token}}`,
                "img": dataurl,
              };

              data = JSON.stringify(data);

              $.ajax({
                  url: '/loggedin',
                  type: 'post',
                  data,
                  headers: {
                      'content-type': 'application/json',
                  }
                }).done((res) => {
                  console.log(res);
                  $('.saving-thumbnail').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                }).fail((e) => {
                  console.log('error', e.responseText);
                });

            });

            function readURL(input) {

                if (input.files && input.files[0] && (/\.(jpe?g|png)$/i.test(input.files[0].name))) {

                    var reader = new FileReader();

                    reader.addEventListener("load", function(e) {

                        $('#imgPreview').attr('src', reader.result).css({
                            'max-height': '100%',
                            'max-width': '100%'
                        });

                        $('.preview-image-box').show().addClass('d-flex').animate({

                            opacity: 1,

                        }, 500, 'linear');

                        $('.image-for-storage').attr({
                            src: reader.result
                        });

                    })

                    reader.readAsDataURL(input.files[0]);

                } else {

                    $('#upload-error').remove();

                    let elem = `<div id="upload-error" class="mt-2"><small><i class="text-warning fas fa-exclamation-circle"></i> Oops this file is not an image.</small></div>`;

                    $('.upload-error-here').append(elem);

                    $('#upload-error').fadeIn();

                }

            }

            $("#imgInp").change(function() {

                readURL(this);

            });

            $('.image-for-storage').on('load', function() {

                console.log('2. ".image-for-storage" is loaded now at an hidden place.');

                ConvertImageandStoreImageInCloudinary();

            })

            let ConvertImageandStoreImageInCloudinary = function() {

                var StorageCanvas = document.getElementById('canvas-for-storage');

                var ctx = StorageCanvas.getContext("2d");

                var img = $('.image-for-storage')[0];

                ctx.drawImage(img, 0, 0);

                var MAX_WIDTH = 1200;
                var MAX_HEIGHT = 800;
                var width = img.width;
                var height = img.height;

                if (width > height) {
                    if (width > MAX_WIDTH) {
                        height *= MAX_WIDTH / width;
                        width = MAX_WIDTH;
                        console.log('Image is now downsized - I.')
                    }
                } else {
                    if (height > MAX_HEIGHT) {
                        width *= MAX_HEIGHT / height;
                        height = MAX_HEIGHT;
                        console.log('Image is now downsized - II.')
                    }
                };

                StorageCanvas.width = width;
                StorageCanvas.height = height;
                var ctx = StorageCanvas.getContext("2d");
                ctx.drawImage(img, 0, 0, width, height);

                function isTainted(ctx) {
                    try {
                        //                        var pixel = ctx.getImageData(0, 0, 1, 1);
                        var dataurl = ctx.toDataURL("image/png");
                        return false;
                    } catch (err) {
                        return (err.code === 18);
                    }
                }

                if (isTainted(StorageCanvas)) {

                    console.log('3. image-for-storage when placed in canvas, it is tainted.');

                    $('.ok-btn-box .error-span').find('small').html('<i class="text-warning fas fa-exclamation-circle"></i> Sorry, canvas is tainted! I will save these images in local database. Wait a moment please.');

                    let data = {
                      "query": 'uploadImage',
                      "token": `{{token}}`,
                      "status": "Draft",
                      "img": $("#image-link").val(),
                    };

                    data = JSON.stringify(data);

                    $.ajax({
                        url: '/loggedin',
                        type: 'post',
                        data,
                        headers: {
                            'content-type': 'application/json',
                        }
                      }).done((res) => {
                        console.log(res);
                        $('.image').data({'public_id':res.public_id}).attr({src: res.image});
                        $('.saving-image').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                      }).fail((e) => {
                        console.log('error', e.responseText);
                      });

                    return true;

                }

                var dataurl = StorageCanvas.toDataURL("image/png");

                $('.image').attr({
                    src: dataurl
                });

                console.log('Image tag is given the src of dataurl, but not loaded yet.');

                return;

            }

            $('.next-upload-btn').on('click', function() {

                $('#upload-error').remove();

                $("#dialog-final").dialog('open');

                $("#dialog-uploadImage").dialog('close');

                console.log('".image" is set to "firstLoad : true"');

                $('.image').attr({
                    firstLoad: true
                });

                $('.image').trigger('load');

            })

            $('.ok-btn').on('click', function(e) {

                if (!($(".validate-image-exists:eq(0)").valid())) {

                    $('.ok-btn-box').find('.error-span').show();

                    return;

                }

                console.log('1. Image is valid, add source to .image-for-storage');

                $('.saving-image').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                $('.image-for-storage').attr({
                    src: $("#image-link").val()
                });

                $('.ok-btn-box').find('.error-span').css({
                    display: 'none'
                });

                $("#dialog-final").dialog('open');

                $("#dialog-uploadImage").dialog('close');

                console.log('2. ".image" is set to "firstLoad : true"');

                $('.image').attr({
                    firstLoad: true
                });

                return 'dialog final is being opened';

            })

            $('.change-upload-btn').on('click', function() {

                $('.preview-image-box').animate({

                    opacity: 0,

                }, 100, "linear", function() {

                    $(this).hide().removeClass('d-flex');

                })

            })

            $('.share-btn').click(function() {

                spinner.start();

                update_image_table_db();

            })

            let update_image_table_db = function(call) {

                $('.saving-thumbnail').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                if ($('.image').height() < 10) {

                    console.log('.image height is less then 10 that means no .image is there');

                    return;

                }

                let aTag = `<a class="aTag" style="display:none">Click Me</a>`;

                $('body').append(aTag);

                printhidendisplay.execute(false);

                let div = document.querySelector('.custom-hide');

                // console.log('-- Going to print this printing area. Image link should be: ' + $('.custom-hide').find('.image').attr('src'));

                html2canvas(div, {

                    useCORS: true,
                    backgroundColor: 'null',
                    scale: 1,
                    logging: true

                }).then(function(drawnPic) {

                    let dataUrl = drawnPic.toDataURL('image/jpeg');
                    $('.thumbnail').attr({src: dataUrl});
                    printhidendisplay.undo();

                    if (call == 'save_draft') {

                        console.log('saved draft');

                        return;

                    }

                    spinner.end();

                    $('#link2page').html(`https://${window.location.hostname}/${$('.image').data().public_id}`);

                    $('.share-btn').tooltip('hide');

                    $("#dialog-final").dialog('close');

                    $("#dialog-share").dialog('open');

                  });

                return true;
            };

            let store_circle_data = function() {

                givedatatotextbox();

                let circleData = new Array();

                let circlesOnDOM = $('.circleAndNo').each(function() {

                    if ($(this).data().comment && $(this).css('display') != 'none') {

                        $(this).data({
                            classs: $(this).attr('class')
                        });

                        circleData.push({
                            data: $(this).data(),
                            label: $(this).children('elem').html(),
                            comment: $(this).data().comment,
                        });

                    }

                });

                console.log(circleData);

                update_image_table_db('save_draft');

                $('.saving-data').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                let imageData = JSON.stringify(circleData);

                let data = {
                  "query": 'updateImageData',
                  "public_id": $('.image').data().public_id,
                  "token": `{{token}}`,
                  "imageData": imageData
                };

                data = JSON.stringify(data);

                console.log(data);

                $.ajax({
                    url: '/loggedin',
                    type: 'post',
                    data,
                    headers: {
                        'content-type': 'application/json',
                    }
                  }).done((res) => {
                    console.log(res);
                    $('.saving-data').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                  }).fail((e) => {
                    console.log(e.responseText);
                  });

            }

            let images_cloudinary = new Object();



            $('.publish-btn').on('click', function() {

                let data = {
                  "query": 'updateImageStatus',
                  "public_id": $('.image').data().public_id,
                  "token": `{{token}}`,
                  "status": 'Published',
                  "title" : $('#in-title').val(),
                  "ctr": $('.detailBox').attr('ctr'),
                };

                data = JSON.stringify(data);

                console.log(data);

                $.ajax({
                    url: '/loggedin',
                    type: 'post',
                    data,
                    headers: {
                        'content-type': 'application/json',
                    }
                  }).done((res) => {
                    console.log(res);
                    $('.saving-data').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                    $('.saving-done').html('<i class="fas fa-check-circle"></i> Published');
                    let picId = $('.image').data().public_id;
                    return window.location.assign(`/picture/${picId},{{token}}`);
                  }).fail((e) => {
                    console.log(e.responseText);
                  });

            });

            var $grid = $('.grid').masonry({

                itemSelector: '.grid-item',
                initLayout: true

            });

            $('.contribution-btn').on('click', function() {

                $('.badge-success').closest('.grid-item').show();

                $('.badge-danger').closest('.grid-item').show();

                $grid.masonry('layout');


            })

            $('.drafts-btn').on('click', function() {

                $('.Published').closest('.grid-item').hide();

                $('.Draft').closest('.grid-item').show();

                $grid.masonry('layout');

            })

            $('.published-btn').on('click', function() {

                $('.Published').closest('.grid-item').show();

                $('.Draft').closest('.grid-item').hide();

                $grid.masonry('layout');

            })

            $('.back-btn').on('mouseenter mouseleave', function() {

                $(this).toggleClass('text-info', 50);

            })

            $('.upload-textarea-wrapper textarea').on('focusin', function() {

                $('.upload-textarea-wrapper').find('.text-center').css({
                    opacity: 0.05
                });
                $('.upload-textarea-wrapper').find('.ok-btn-box').css({
                    display: 'block',
                    opacity: 1
                });

            })

            $('body').on('click', function(e) {

                if ($(e.target).is('.ok-btn')) {

                    return;

                }

                // Clicking outside textarea will trigger c-event
                if (!($(e.target).is('.upload-textarea-wrapper textarea'))) {

                    $('.upload-textarea-wrapper textarea').trigger('c-event');

                }

            })

            $('.upload-textarea-wrapper textarea').on('c-event', function() {

                if ($(this).val() == '') {

                    $('.upload-textarea-wrapper').find('.text-center').css({
                        opacity: 1
                    });
                    $('.upload-textarea-wrapper').find('.ok-btn-box').css({
                        display: 'none',
                        opacity: 0
                    });

                }

            })

            $('.delete-badge').on('mouseenter mouseleave', function() {
              $(this).toggleClass('text-secondary text-warning').siblings('.card').toggleClass('bg-dark bg-warning');
            });

            $('.delete-badge').on('click', function() {

              let data = {
                "query": 'deleteImage',
                "token": `{{token}}`,
                "public_id": $(this).siblings('.card').find('.card-image-top').attr('data-id'),
              };

              data = JSON.stringify(data);

              $.ajax({
                  url: '/loggedin',
                  type: 'post',
                  data,
                  headers: {
                      'content-type': 'application/json',
                  }
                }).done((res) => {
                  console.log(res);
                  window.location.reload(true);
                }).fail((e) => {
                  console.log('ERROR', e.responseText);
                });
            });

            $(window).on("load", function() {
              console.log('All images loaded');
              $grid.masonry('layout');
            });

            $grid.on( 'layoutComplete', () => {
                try {
                  // $('.card:eq(-1)').trigger('click');
                }
                catch (e) {
                  console.log(e)
                }
            });

        </script>

    </body>

</html>
