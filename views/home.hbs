<!doctype html>

<html lang="en">

    <head>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" integrity="sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId/iRN3ewGhXQFZCSftd1LZCfmhktB" crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">

        <style type="text/css">
            /* width */

            ::-webkit-scrollbar {
                width: 1px;
                height: 0px;
            }

            /* Track */

            ::-webkit-scrollbar-track {
                background: #f1f1f1;
            }

            /* Handle */

            ::-webkit-scrollbar-thumb {
                background: #888;
            }

            /* Handle on hover */

            ::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

            .canvas-btn {

                cursor: pointer;
                position: relative;
                font-size: 80%;


            }

            bg-transparent {
                background-color: transparent;
            }

            canvas {
                position: absolute;
                z-index: 2;
                cursor: copy;


                /*				pointer-events: none;*/
            }

            .saving-div {
              pointer-events: none;
            }

            @keyframes blink {
                /**
                 * At the start of the animation the dot
                 * has an opacity of .2
                 */
                0% {
                  opacity: .2;
                }
                /**
                 * At 20% the dot is fully visible and
                 * then fades out slowly
                 */
                20% {
                  opacity: 1;
                }
                /**
                 * Until it reaches an opacity of .2 and
                 * the animation can start again
                 */
                100% {
                  opacity: .2;
                }
            }

            .saving span {
                /**
                 * Use the blink animation, which is defined above
                 */
                animation-name: blink;
                /**
                 * The animation should take 1.4 seconds
                 */
                animation-duration: 1.4s;
                /**
                 * It will repeat itself forever
                 */
                animation-iteration-count: infinite;
                /**
                 * This makes sure that the starting style (opacity: .2)
                 * of the animation is applied before the animation starts.
                 * Otherwise we would see a short flash or would have
                 * to set the default styling of the dots to the same
                 * as the animation. Same applies for the ending styles.
                 */
                animation-fill-mode: both;
            }

            .saving span:nth-child(2) {
                /**
                 * Starts the animation of the third dot
                 * with a delay of .2s, otherwise all dots
                 * would animate at the same time
                 */
                animation-delay: .2s;
            }

            .saving span:nth-child(3) {
                /**
                 * Starts the animation of the third dot
                 * with a delay of .4s, otherwise all dots
                 * would animate at the same time
                 */
                animation-delay: .4s;
            }

            .img-block {
                background: transparent;

            }

            .bg-shadow {

                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

            }

            .circleAndNo {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 2;
                font-size: 80%;
                font-weight: bold;
                height: 1.7rem;
                width: 1.7rem;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
                cursor: pointer;
            }

            .circleAndNo elem {

                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);

            }

            .circleAndNo span {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                height: 180%;
            }

            .fa-paint-brush {
                pointer-events: none;
            }

            textarea {
                resize: none;
            }

            .hover-pop {

                pointer-events: none;

            }

            .detailBox {
                position: absolute;
                z-index: 5;
                display: none;
                cursor: pointer;
            }

            .detailBox-text {

                position: relative;
                max-width: 100%;
                white-space: nowrap;
                overflow: hidden;

            }

            .span-No {
                min-width: 8.5%;
            }

            .detailBox-Big {

                top: 100%;
                left: 0%;
                /*								display: none;*/
                word-wrap: break-word;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);

            }

            .deletecircleAndNo {

                cursor: pointer;

            }

            .setting-btn {

                position: relative;

            }

            .settings-btn span {

                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                height: 1.5rem;

            }

            .box {

                height: 3rem;
                width: 4rem;
                position: relative;
                cursor: pointer;

            }

            .rtbt-subBox {

                right: 0px;
                bottom: 0px;

            }

            .ltbt-subBox {

                left: 0px;
                bottom: 0px;

            }

            .lttp-subBox {

                top: 0px;
                left: 0px;

            }

            .rttp-subBox {

                top: 0px;
                right: 0px;

            }

            .bgbt-subBox {

                bottom: 0px;

            }

            .custom-popover-header::before {
                width: 0rem !important;
            }

            .settings-btn {
                position: relative;
                cursor: pointer;
                font-size: 80%;
            }

            #overlay {

                left: 50%;
                transform: translate(-50%, 0);
                z-index: 10;

            }

            .image {

                display: block;
                width: auto;
                height: auto;

            }

            .custom-hide {
                position: absolute !important;
                top: -9999px !important;
                left: -9999px !important;
            }

            .overflow-hidden {
                overflow: hidden;
            }

            .ui-dialog-titlebar {
                display: none;
            }

            .logout-btn {
                cursor: pointer;
            }

            .check-label label {
                height: 0px;
            }

            .custom-control-input:checked~.custom-control-label::before {

                background-color: #18a2b9 !important;

            }

            .back-btn {
                cursor: pointer;
            }

            /*Story Board CSS here*/

            .card img {

                /* flex-shrink: 0; */
                max-width: 100%;

            }

            .grid-item a:hover {
                text-decoration: none;
            }

            .draft-badge {

                position: absolute;
                top: 0.5em;
                right: 0.5em;

            }

            .Draft {
              background-color: #DB3445;
              /* color: #E2E6EA; */
            }

            .Published {
              background-color: #28A645;
              /* color: #E2E6EA; */
            }

            .delete-badge {
              position: absolute;
              top: 0.5em;
              left: 0.5em;
              z-index: 1;
              cursor: pointer;
            }

            .modal-spinner {

                position: absolute;
                top: 0%;
                width: 100%;
                height: 100%;
                z-index: 1000;
                background-color: rgba(0, 0, 0, 0.4);

            }

            .spinner {

                position: fixed;
                z-index: 1000;
                top: 50%;
                left: 50%;
                width: 4rem;
                height: 4rem;
                border-radius: 50%;
                border: 0.2rem solid transparent !important;
                border-top: 0.1rem solid #ffc107 !important;
                border-right: 0.1rem solid #ffc107 !important;
                border-bottom: 0.1rem solid #ffc107 !important;
                margin-top: -2rem;
                margin-left: -2rem;
                pointer-events: none;
                animation: spin 2s linear infinite;

            }

            @keyframes spin {
                0% {
                    transform: rotate(0deg);
                }
                100% {
                    transform: rotate(360deg);
                }
            }

            .upload-btn-wrapper {

                cursor: pointer;
                /*				pointer-events: none;*/
            }

            .upload-btn-wrapper input[type=file] {

                position: absolute;
                top: -1000px;

            }

            .upload-textarea-wrapper .heading {

                z-index: 2;
                pointer-events: none;

            }

            .upload-btn-text {

                font-size: 200%;

            }

            .upload-textarea-wrapper textarea {

                font-size: 200%;
                z-index: 1;

            }

            .ok-btn {

                cursor: pointer;

            }

            .ok-btn-box {

                position: absolute;
                bottom: 0px;
                right: 0px;
                display: none;
                opacity: 0;
                z-index: 3;

            }

            .ok-btn-file {

                bottom: 0px;
                right: 0px;

            }

            .ok-btn-box label {

                height: 0px;

            }

            .ok-btn-box .error-span {

                display: none;

            }

            small {

                pointer-events: none;

            }

            #upload-error {

                display: none;

            }

            .preview-image-box {

                display: none;
                opacity: 0;

            }

            .card {
                cursor: pointer;
            }

            .small-elem {

                font-size: 80%;
            }

            .blackish-overlay {
              background-color: black;
              opacity: 0.5;
              display: none;
              position: absolute;
              z-index: 8;
            }

            #dialog-final {
              /* z-index: 10; */
            }

            #for-printing {
              position: absolute;
              z-index: 9;
            }

        </style>

        <title>Home - Make a story</title>
    </head>

    <body class="bg-info text-light">

        <div class="btn-container dialog">

            <div class="d-flex flex-column">

                <div class="w-100 bg-dark bg-shadow p-4">

                    <div class="d-flex align-items-center justify-content-between mx-1">

                        <h1 class="display-4">{{name}}</h1>

                        <a href="/logout/{{token}}" class="text-light mr-2" alt=""><i class="fas fa-sign-out-alt" alt="Log Out"></i></a>

                    </div>

                    <div class="d-flex flex-wrap my-1">

                        <button type="button" class="open-btn btn btn-lg m-1 btn-info">Make a story now <i class="fas fa-plus"></i></button>

                        <div class="w-100"></div>

                        <button type="button" class="contribution-btn btn btn-sm m-1 btn-light">
                            Contributions <span class="badge badge-info">18</span>
                        </button>

                        <div class="w-100 d-sm-none"></div>

                        <button type="button" class="published-btn btn btn-sm m-1 btn-light">
                            Published <span class="badge badge-success">4</span>
                        </button>

                        <button type="button" class="drafts-btn btn btn-sm m-1 btn-light">
                            Drafts <span class="badge badge-danger">14</span>
                        </button>

                    </div>

                </div>

                <div class="grid pt-2">

                  {{#each pictures}}

                  <div class="grid-item col-6 col-sm-4 col-md-3 col-lg-2 px-1 pb-2">
                    <div class="badge text-secondary delete-badge"><i class="fas fa-trash"></i></div>
                    <div class="card p-0 bg-dark bg-shadow">

                      <div class="badge draft-badge {{status}}">{{status}}</div>
                      <img class="card-image-top rounded-top border border-dark" src="{{thumbnail}}"  data-id="{{_id}}" data-comments= "{{data}}" data-image={{image}}>
											<div class="card-body p-1">
												<h6 class="mt-1 card-text image-title">{{title}}</h6>
												<div class="mb-1"><small class="text-muted image-created">Created on {{dates}}</small></div>
											</div>
										</div>
				          </div>

                  {{/each}}


                </div>

            </div>

        </div>

        <div id="dialog-uploadImage" class="container dialog d-flex align-items-center justify-content-center">

            <div class="col-lg-4 col-md-6 col-sm-8 col-12 bg-dark rounded text-light bg-shadow p-0 m-0">

                <div class="p-0 m-0 upload-image-box">

                    <div class="my-0 position-relative h-50 bg-dark rounded-top ">

                        <label class="position-absolute upload-btn-wrapper w-100 h-100 d-flex align-items-center justify-content-center flex-wrap">

                            <div class="upload-error-here text-light text-center">
                                <h5 class="upload-btn-text"><i class="fas fa-upload"></i></h5>
                                <small>Click here to upload your image</small>
                            </div>

                            <input id="imgInp" type="file" name="myfile"/>

                        </label>

                        <div class="preview-image-box position-absolute rounded-top bg-dark w-100 h-100 align-items-center justify-content-center">

                            <div class="position-relative w-50 h-50 d-flex align-items-center justify-content-center flex-wrap">

                                <img class="bg-light rounded p-1 text-dark" id="imgPreview" src="" alt="Image preview...">

                                <small class="my-1"><i class="text-success fas fa-check-circle"></i> Yep looks good.</small>

                            </div>

                            <div class="ok-btn-file position-absolute d-flex align-items-end">

                                <span class="change-upload-btn px-2 py-1 rounded mr-1 mb-1 bg-light text-dark "><small>Change</small></span>

                                <span class="next-upload-btn px-2 py-1 rounded mr-1 mb-1 bg-light text-dark"><small>Next</small></span>

                            </div>

                        </div>

                    </div>

                    <div class="my-0 position-relative upload-textarea-wrapper h-50 border border-dark rounded-bottom">

                        <div class="heading position-absolute w-100 h-100 text-light d-flex align-items-center justify-content-center">
                            <div class="text-dark text-center">
                                <h5 class="upload-btn-text"><i class="fas fa-clipboard"></i></h5>
                                <small>Paste the link to your image here</small>
                            </div>
                        </div>

                        <form class="validate-image-exists">

                            <textarea id="image-link" name="image-link" class="border border-light bg-light position-absolute w-100 h-100 rounded-bottom p-4"></textarea>


                            <div class="ok-btn-box d-flex align-items-end rounded m-1 bg-dark">

                                <span class="error-span px-2 py-1 text-light">

                                    <small>
                                        <label for="image-link" generated="true" class="error"></label>
                                    </small>

                                </span>

                                <span class="ok-btn px-2 py-1"><small>Next</small></span>

                            </div>

                        </form>

                    </div>

                </div>

            </div>

        </div>

        <div id="dialog-final" class="pt-0 d-flex flex-wrap align-items-stretch justify-content-center">

          <div class="blackish-overlay"></div>

          <div class="position-fixed saving-div" style="z-index: 12">
            <div class="position-absolute text-right" style="right:20px; bottom:10px; z-index: 12">
              <small class="saving badge badge-pill badge-light saving-data shadow d-none">saving data <span>.</span><span>.</span><span>.</span> </small>
              <small class="saving badge badge-pill badge-light saving-image d-none">saving image <span>.</span><span>.</span><span>.</span></small>
              <small class="saving badge badge-pill badge-light saving-thumbnail d-none">saving thumbnail <span>.</span><span>.</span><span>.</span></small>
              <small class="badge badge-pill badge-success saving-done saving-badge"><i class="fas fa-check-circle"></i> Saved</small><br>
            </div>
          </div>

          <div class="pt-md-3 col-lg-8 col-md-10 col-12 order-mdm-1 order-2 mx-0 p-0 rounded-top">

              <div class="img-block">

                  <div id="overlay" class="position-absolute">

                      <div class="detailBox bg-dark rounded" ctr="4">


                          <small class="border-right px-1 rounded-left">1</small>
                          <small class="border-right px-1">2</small>
                          <small class="border-right px-1">3</small>
                          <small class="px-1 rounded-right">4</small>


                      </div>

                      <canvas data-html2canvas-ignore class="" id="myCanvas"></canvas>

                  </div>

                  <div class="" id="for-printing">

                      <div class="circleAndNo rounded-circle bg-info text-light">
                          <span data-container="body" data-toggle="popover" data-placement="top" data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus."></span>
                          <elem></elem>
                      </div>

                      <img class="image bg-shadow mx-auto border border-dark rounded-top" id="blah" src="" alt="">

                      <div class="position-relative mx-auto detailBox-Big">

                          <div class="d-flex flex-wrap bg-dark rounded-bottom">

                          </div>

                      </div>

                  </div>

              </div>

          </div>

          <div class="order-md-2 order-1">

                <div class="carry-menu d-flex align-items-center">

                    <div class="d-md-block mx-auto d-flex justify-content-center col-md-12 col-11 mx-2 text-center align-items-center">

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M13.2728 29.5628L18.3857 12.3762C18.3983 12.3342 18.4373 12.3042 18.4801 12.3042H23.4449C23.4888 12.3042 23.5267 12.3332 23.5384 12.3762L28.7262 29.5608C28.7359 29.5938 28.7311 29.6278 28.7145 29.6508C28.6941 29.6788 28.6639 29.6948 28.6318 29.6948H24.5615C24.5177 29.6948 24.4788 29.6658 24.4671 29.6218L23.334 25.7472C23.2532 25.4722 23.0059 25.2821 22.7255 25.2821H19.0389C18.7536 25.2821 18.5034 25.4772 18.4275 25.7602L17.3839 29.6198C17.3722 29.6638 17.3323 29.6948 17.2885 29.6948H13.3673C13.3361 29.6948 13.305 29.6788 13.2884 29.6558C13.2699 29.6288 13.2641 29.5938 13.2728 29.5628ZM13.3673 31H17.2885C17.9009 31 18.4431 30.5759 18.6076 29.9688L19.5217 26.5873H22.2534L23.2502 29.9958C23.4216 30.5869 23.9609 31 24.5616 31H28.6318C29.063 31 29.4748 30.786 29.7357 30.4259C29.9898 30.0689 30.0667 29.6018 29.9401 29.1767L24.7514 11.9891C24.5723 11.3971 24.0475 11 23.4449 11H18.4801C17.8746 11 17.3479 11.4001 17.1707 11.9951L12.0589 29.1837C11.9333 29.6058 12.0112 30.0709 12.2682 30.4319C12.5271 30.788 12.9379 31 13.3673 31Z" fill="black"/>
                        <path d="M20.6306 22H22.369C22.5682 22 22.7558 21.9129 22.8738 21.7647C22.9937 21.6174 23.0304 21.4261 22.9743 21.2492L22.1902 18.7688C22.1554 18.6565 22.1186 18.5424 22.0828 18.4248C22.0045 18.1706 21.7406 17.9991 21.4669 18C21.1817 18.0036 20.9352 18.185 20.8655 18.4419C20.8269 18.5784 20.7901 18.7122 20.7505 18.8406L20.0234 21.2564C19.9702 21.4324 20.0089 21.6219 20.1278 21.7683C20.2467 21.9138 20.4333 22 20.6306 22" stroke="black"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="black"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M11.1925 27.3488C11.2113 27.3535 11.2302 27.3582 11.2483 27.3621L12.7799 25.2433C12.8059 25.2237 12.8311 25.201 12.8531 25.1752L14.6035 23.1746C14.7239 23.3945 14.8915 23.5612 15.1032 23.6724C15.8761 24.0755 16.8386 23.4736 16.9464 23.4039C16.9645 23.3914 16.9819 23.3781 16.9992 23.364C17.5713 22.8693 17.8366 22.802 17.9106 22.7942C18.0302 22.9859 18.005 23.7295 17.8547 24.3737C17.8476 24.4034 17.8429 24.4332 17.8413 24.4629C17.798 25.3725 18.0349 26.0636 18.5449 26.5152C19.1808 27.078 20.0269 27.0522 20.3063 27.0256C21.2838 27.1923 21.9583 27.5445 22.3116 28.0744C22.6524 28.5855 22.6005 29.146 22.5714 29.3268L21.4372 31.127C21.4365 31.1278 21.4357 31.1278 21.4349 31.1286C20.965 31.5685 20.1709 32.5923 19.4374 31.9583C19.1131 31.6781 19.0942 31.1129 18.7165 30.8265C18.3843 30.5752 18.1278 30.5838 17.7272 30.5736C17.484 30.6621 17.2392 30.6613 16.9945 30.5697C16.693 30.6277 16.5238 30.5181 16.4845 30.241C16.3058 30.0625 16.3082 29.8606 16.1035 29.6813C15.81 29.4246 15.4558 29.362 15.0812 29.3596C14.8341 29.3581 14.5405 29.4849 14.2997 29.4457C13.2513 29.2751 13.7904 29.009 13.3324 28.6419C12.5666 28.0274 11.8339 28.274 11.0382 28.6513C11.0217 28.6591 11.0051 28.6669 10.9886 28.6748C10.9863 28.6591 10.9847 28.6442 10.9831 28.6294C10.9201 28.1965 10.9123 27.777 11.1925 27.3488ZM19.3154 18.1753L26.1248 23.0321L23.3497 27.9163C23.3222 27.8552 23.2923 27.7934 23.2584 27.7324C23.2254 27.6705 23.1884 27.6087 23.1482 27.5476C23.0821 27.4459 23.0082 27.3496 22.9279 27.2572C22.8507 27.168 22.7681 27.0843 22.6792 27.0036C22.2746 26.6373 21.7418 26.3626 21.0839 26.1849C20.8651 26.1246 20.6313 26.0761 20.385 26.0378C20.3598 26.0339 20.3346 26.0323 20.3094 26.0323C20.2811 26.0323 20.2528 26.0346 20.2252 26.0393C20.2252 26.0393 20.2221 26.0401 20.2166 26.0409C20.2055 26.0417 20.1851 26.044 20.1575 26.0464C20.1434 26.0472 20.1276 26.0479 20.1103 26.0487C20.0922 26.0495 20.0733 26.0503 20.0529 26.0503C19.9907 26.0511 19.9159 26.0487 19.8341 26.0393C19.6814 26.0205 19.5067 25.9775 19.3492 25.8859C19.2973 25.8554 19.2461 25.8186 19.1989 25.7763C19.1407 25.7247 19.0895 25.6644 19.0455 25.5963C18.9345 25.4257 18.8707 25.1995 18.844 24.9294C18.8385 24.8762 18.8298 24.8261 18.8282 24.7682C18.8267 24.7001 18.8274 24.6296 18.8306 24.5569C18.8306 24.5553 18.8298 24.5545 18.8306 24.5529C18.8337 24.5373 18.8385 24.5169 18.8416 24.4997C18.8589 24.4222 18.8778 24.3299 18.8967 24.2234C18.8975 24.2179 18.8991 24.2117 18.8999 24.2054C18.9054 24.1741 18.9101 24.1397 18.9148 24.1076C18.9211 24.07 18.9274 24.0356 18.9329 23.9949C18.9841 23.6411 18.9927 23.3452 18.9738 23.0979C18.9644 22.9703 18.9471 22.8552 18.9243 22.7527C18.8574 22.4505 18.7432 22.251 18.6307 22.1195C18.5551 22.0326 18.4804 21.9762 18.4206 21.9402C18.2545 21.84 18.0782 21.8001 17.8995 21.8056C17.8106 21.8079 17.7201 21.8212 17.6304 21.8447C17.2251 21.9457 16.8205 22.229 16.4868 22.5046C16.449 22.5351 16.4128 22.5656 16.3782 22.5961C16.3514 22.6118 16.3215 22.629 16.2893 22.6454C16.1933 22.6963 16.0744 22.7464 15.9579 22.7816C15.9194 22.7934 15.8808 22.8028 15.8438 22.8106C15.806 22.8184 15.7706 22.8239 15.736 22.8263C15.7021 22.8286 15.6699 22.8278 15.6408 22.8239C15.6116 22.8192 15.5857 22.8122 15.5636 22.7996C15.4881 22.7613 15.407 22.6141 15.3732 22.3277L19.3154 18.1753ZM23.9463 15.9532C24.025 15.9172 24.0927 15.8624 24.1431 15.7919L28.6834 9.50665C28.7881 9.42525 29.0832 9.21235 29.4469 9.08633C29.5374 9.05502 29.6326 9.02919 29.7302 9.01119C29.7806 9.00258 29.8309 8.99632 29.8813 8.99319C30.1292 8.9744 30.3858 9.02215 30.6219 9.18965C30.6329 9.19669 30.6431 9.20296 30.6542 9.20922C30.6557 9.21078 30.6573 9.21157 30.6589 9.21313C30.6612 9.2147 30.6636 9.21704 30.666 9.21861C30.6715 9.22252 30.6762 9.22565 30.6801 9.22879C30.6896 9.23661 30.6998 9.24444 30.7108 9.25305C30.7966 9.31488 30.8667 9.38533 30.9257 9.46047C30.98 9.53092 31.0233 9.60606 31.0587 9.68511C31.15 9.88862 31.183 10.1125 31.1807 10.3269C31.1807 10.3293 31.1807 10.3309 31.1807 10.3332C31.1791 10.4224 31.1728 10.5085 31.1626 10.5923C31.1461 10.7277 31.1201 10.8522 31.0949 10.9539C31.0689 11.0557 31.043 11.1355 31.0272 11.1832L26.4876 17.4677C26.4294 17.5476 26.3971 17.6438 26.3947 17.7432L26.3003 21.9457L22.2644 19.0668L20.2457 17.6274L23.9463 15.9532ZM10.1386 29.3847C10.1811 29.7588 10.5109 29.9647 10.8627 29.7988C11.1767 29.65 11.9921 29.0818 12.3415 29.1914C12.7516 29.3197 12.7043 29.6125 12.9428 29.8528C13.2742 30.1862 13.4977 30.3733 13.9966 30.4132C14.2997 30.4367 14.6365 30.2762 14.9285 30.3224C15.7572 30.4523 15.5699 30.7873 15.9131 31.2178C16.2058 31.5865 16.5388 31.7055 17.0055 31.6906C17.4273 31.6765 17.5619 31.527 17.9893 31.7321C18.4449 31.9497 18.4095 32.1853 18.6897 32.5602C18.9416 32.8991 19.2123 33.1355 19.6491 33.2013C20.6416 33.35 21.4695 32.4099 22.1157 31.8057C22.1668 31.7571 22.2022 31.7055 22.2266 31.653C22.2392 31.6577 22.251 31.664 22.2644 31.6679L23.4583 29.7745C23.4851 29.7314 23.5048 29.6853 23.5174 29.6375C23.5182 29.6344 23.5205 29.625 23.5237 29.6125L27.2054 23.1315C27.2227 23.101 27.2353 23.0697 27.2463 23.0368C27.2479 23.0305 27.2495 23.0235 27.2503 23.0165C27.2597 22.9836 27.2652 22.9507 27.2668 22.917C27.2668 22.9116 27.2691 22.9061 27.2691 22.9006L27.3809 17.9178L31.8701 11.703C31.8929 11.6717 31.9126 11.6372 31.9268 11.6004C31.9614 11.5167 32.7414 9.55048 31.3326 8.4852C31.3271 8.47972 31.3208 8.47502 31.3153 8.47033C31.298 8.45624 31.2806 8.4445 31.261 8.43041C31.2507 8.42258 31.2413 8.41554 31.2311 8.40927C31.2177 8.3991 31.2051 8.38971 31.1909 8.38031C31.1775 8.37092 31.1642 8.36231 31.15 8.35448C29.6869 7.37295 28.0664 8.73489 27.9971 8.79359C27.9672 8.81864 27.9405 8.8476 27.9177 8.87891L23.4158 15.111L19.1383 17.0466C19.047 17.0678 18.9605 17.1147 18.892 17.1867L14.5853 21.7234C14.5515 21.7469 14.5177 21.7719 14.4901 21.804L12.1999 24.4214C12.1463 24.4551 12.0991 24.4981 12.0598 24.5522L10.4849 26.7328C10.4416 26.7657 10.3999 26.8056 10.3653 26.8581C10.3181 26.9293 10.2787 26.9997 10.2417 27.0686L10.2055 27.1203C10.2087 27.1203 10.2118 27.1211 10.215 27.1218C9.84742 27.867 10.0418 28.53 10.1386 29.3847Z" fill="white"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M9 33.125H33V30H27.1681L21 31.1229L15.1327 30H9V33.125Z" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M18.2102 5.61256L23.6445 10V18.1513H29L21 27.4086L13 18.285H18.2102V5.61256Z" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path d="M31 21.5L12.0373 21.5" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M19 30L12 21.4992L19 13" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path d="M12 21.5H30.9627" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M24 13L31 21.5008L24 30" stroke="black" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path d="M14.4474 22.6772L11.1058 25.4811" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M17.6305 23.9225L11.5021 29.0648" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M21.0909 24.935L11.1323 33.2913" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M33.3472 10.7607L21.6723 10.7404L24.4452 14.0451L16.9257 20.3547L23.4312 23.4239L28.6444 19.0495L31.3141 22.2311L33.3472 10.7607Z" stroke="black" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </div>

                      <div class="menu-btn px-md-3 px-2 py-0 my-0" style="line-height:1px">
                        <svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21 42C32.598 42 42 32.598 42 21C42 9.40202 32.598 0 21 0C9.40202 0 0 9.40202 0 21C0 32.598 9.40202 42 21 42Z" fill="white"/>
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M21.5 22.5182L16.75 27.2682C16.3351 27.6832 15.8056 27.8264 15.5674 27.5882C15.3292 27.35 15.4724 26.8205 15.8873 26.4056L20.6373 21.6556L15.7318 16.75C15.3168 16.3351 15.1736 15.8056 15.4118 15.5674C15.65 15.3292 16.1795 15.4724 16.5944 15.8873L21.5 20.7929L26.4056 15.8873C26.8205 15.4724 27.35 15.3292 27.5882 15.5674C27.8264 15.8056 27.6832 16.3351 27.2682 16.75L22.3627 21.6556L27.1127 26.4056C27.5276 26.8205 27.6708 27.35 27.4326 27.5882C27.1944 27.8264 26.6649 27.6832 26.25 27.2682L21.5 22.5182Z" fill="black"/>
                        </svg>
                      </div>

                        <!-- <div data-toggle="tooltip" data-placement="left" title="Close" class="canvas-btn close-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-times"></i></div>

                        <div data-toggle="tooltip" data-placement="left" title="Download as .Jpeg" class="download-pic canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-download"></i></div>

                        <div data-toggle="tooltip" data-placement="left" title="Shift + Ctrl + Z (Redo)" class="redo canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-redo"></i></div>

                        <div data-toggle="tooltip" data-placement="left" title="Ctrl + Z (Undo)" class="undo canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-undo"></i></div>

                        <div class="settings-btn border rounded bg-light text-dark p-1 px-md-3 px-2 m-1">
                            <i class="fas fa-cog"></i>
                            <span data-container="body" data-toggle="popover" data-placement="bottom" data-content=".."></span>
                        </div>

                        <div data-toggle="tooltip" data-placement="left" title="Done" class="share-btn canvas-btn border rounded p-1 px-md-3 px-2 m-1"><i class="fas fa-share"></i></div> -->

                    </div>
                </div>

            </div>

        </div>

        <div id="dialog-share" class="container d-flex align-items-center justify-content-center">

              <div class="col-lg-4 col-md-6 col-sm-8 col-12 bg-dark rounded p-3 text-light bg-shadow">

                  <form id="share-form" method="post" action="http://localhost/themepic/save_photo.php" novalidate>

                      <div class="form-group">

                          <div class="d-flex justify-content-between align-items-center">

                              <label for="in-title">Title <span class="text-muted">(Optional)</span></label>

                              <small class="text-warning pl-2 text-right"><label for="in-title" generated="true" class="error"></label></small>

                          </div>

                          <input name="in-title" type="text" class="form-control" id="in-title" aria-describedby="emailHelp" placeholder="Fall of titans">

                          <div class="pt-1">

                              <small class="text-muted">Title is recommended as it will help you find your notes easily</small>

                          </div>

                      </div>

                      <div class="form-group">

                          <label for="in-link">Your Link</label>

                          <div class="p-2 bg-white rounded">
                              <div class="d-none"><i class="far fa-copy"></i></div>
                              <code id="link2page" class="text-dark"></code>
                          </div>

                          <div class="pt-1">

                              <small class="text-muted">Visible to you only till you publish</small>

                          </div>

                      </div>

                      <button type="button" class="publish-btn btn btn-info">Publish</button>
                      <button type="button" class="edit-btn btn btn-outline-light">Edit</button>

                      <div class="position-absolute text-right" style="right:20px; bottom:20px; z-index: 12">
                        <small class="saving badge badge-pill badge-light saving-data shadow d-none">saving data <span>.</span><span>.</span><span>.</span> </small>
                        <small class="saving badge badge-pill badge-light saving-image d-none">saving image <span>.</span><span>.</span><span>.</span></small>
                        <small class="saving badge badge-pill badge-light saving-thumbnail d-none">saving thumbnail <span>.</span><span>.</span><span>.</span></small>
                        <small class="badge badge-pill badge-success saving-done saving-badge"><i class="fas fa-check-circle"></i> Saved</small>
                      </div>

                  </form>

              </div>

          </div>

        <img class="image-for-storage position-absolute" id="blah" src="" alt="" style="top: -9999px; left: -9999px; opacity: 0">
        <img class="thumbnail position-absolute" id="" src="" alt="" style="top: -9999px; left: -9999px; opacity: 0">

        <canvas id="canvas-for-storage" style="top: -9999px; left: -9999px; opacity: 0"></canvas>

        <script src="https://code.jquery.com/jquery-3.3.1.js" integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60=" crossorigin="anonymous"></script>
        <script src="https://html2canvas.hertzen.com/dist/html2canvas.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
        <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.7/jquery.validate.min.js"></script>
        <script src="http://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.0/additional-methods.js"></script>
        <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>

        <script type="text/javascript">

        $(document).ajaxStop(function() {
          $('.saving-done').removeClass('d-none');
        });

        $( document ).ajaxStart(function(e) {
          $('.saving-done').addClass('d-none');
        });

            var canvas = document.getElementById('myCanvas');
            var context = canvas.getContext('2d');
            let circleAndNo = $('.circleAndNo:eq(-1)').hide();
            let clicking = false;
            let x;
            let sliderValue = 50;
            let fitcanvas = fitToContainer(canvas);
            let markerOnCanvasClicked = false;
            let oneInProgress = false;
            let sliderVal = $('.slider').val();
            let mouseEnteredPopOverAlready = false;
            let eventSequence = new Array();

            let wht = $(window).height();
            let wwt = $(window).width();

            let undoNredo = new command();

            let allFunctions = [];

            let undoneFunctions = [];

            function command(instance) {

                this.DOMelem = '';
                this.data1 = '';
                this.arrayData = [];
                this.arrayData2 = [];
                this.undoresult = [];
                this.freshresults = [];
                this.executedResult = '';

                this.executeInCommand = function execute(DOM, data1, data2) {

                    this.DOMelem = DOM
                    this.data1 = data1;
                    this.arrayData.push(data2);
                    allFunctions.push(instance);
                    this.executedResult = instance.execute(DOM, data1, data2);

                };

                this.undoInCommand = function undo() {

                    if (!(allFunctions.length)) return console.log('no function in undo array');
                    var command = allFunctions.pop();
                    undoneFunctions.push(command);
                    circleAndNo.hide().css({
                        opacity: 1
                    });
                    return command.undo();


                };

                this.redoInCommand = function redo() {

                    if (!(undoneFunctions.length)) return console.log('no function in redo array');
                    var command = undoneFunctions.pop();
                    allFunctions.push(command);
                    circleAndNo.hide().css({
                        opacity: 1
                    });
                    return command.redo();

                };

            }

            function fitToContainer(canvas) {
                //				Make it visually fill the positioned parent
                canvas.style.width = '100%';
                canvas.style.height = '100%';
                // 				...then set the internal size to match
                canvas.width = canvas.offsetWidth;
                canvas.height = canvas.offsetHeight;
            }

            function getMousePos(canvas, evt) {
                var rect = canvas.getBoundingClientRect();

                return {
                    x: evt.clientX - rect.left,
                    y: evt.clientY - rect.top
                };
            }

            function storeEvent() {

                let oldVisibleDOM = $.grep($('.detailBox'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    }

                })

                let oldVisibleBigDOM = ($.grep($('.detailBox-Big'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    }

                }))

                eventSequence.push({

                    event: 'Last Small Box Position or Big Box',
                    oldPosnElem: $(oldVisibleDOM[0]).css(['top', 'right', 'bottom', 'left']) || oldVisibleBigDOM[0]

                })

                return eventSequence;

            }

            $(document).ready(function() {

                wht = $(window).height();
                wwt = $(window).width();

                $('.saving-div').css({width:wwt,height:wht});

                $('.btn-container').height(wht);

                $('.upload-image-box').height(wht / 1.5);

                $('[data-toggle="popover"]').popover({

                    animation: true,

                });

                $('[data-toggle="tooltip"]').tooltip();

                $("#dialog-final").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center top",
                        at: "center top",
                        of: window
                    },
                    //					modal: true,
                    autoOpen: false,
                    appendTo: ".btn-container",
                    show: {
                        effect: "fade",
                        duration: 300
                    },
                })

                $("#dialog-uploadImage").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center",
                        at: "center",
                        of: window
                    },
                    modal: true,
                    autoOpen: false,
                    appendTo: ".btn-container",
                    show: {
                        effect: "fade",
                        duration: 500
                    }
                });

                $("#dialog-share").dialog({
                    resizable: false,
                    height: 'auto',
                    width: 'auto',
                    position: {
                        my: "center",
                        at: "center",
                        of: window
                    },
                    modal: true,
                    autoOpen: false,
                    appendTo: ".btn-container",
                    show: {
                        effect: "fade",
                        duration: 500
                    }
                });

            })

            $(window).resize(function() {

                wht = $(window).height();
                wwt = $(window).width();

                $('.mainPage').height(wht);

                $('.image').css({
                    'max-height': wht / 1.1,
                    'max-width': '100%'
                });

                let imgWt = $('.image').width();
                let imgHt = $('.image').height();

                $('.carry-menu').height(imgHt);

                if (wwt < 767) {

                    $('.carry-menu').height('auto');

                }

                $('#overlay').css({
                    height: imgHt,
                    width: imgWt
                });

                $('.detailBox-Big').css({
                    width: imgWt + 2
                });

                $('.circleAndNo').each(function(key, value) {

                    if ($(this).data().percentX) {

                        let percent = $(this).data();

                        $('.circleAndNo:eq(' + key + ')').css({
                            left: percent.percentX * $('#myCanvas').width() + $('#overlay').position().left,
                            top: percent.percentY * $('#myCanvas').height(),
                            'font-size': percent.mFontSize * $('#myCanvas').width(),
                            height: percent.mHeight * $('#myCanvas').width(),
                            width: percent.mWidth * $('#myCanvas').width()
                        })

                    }

                })

                $("#dialog-final").dialog("option", "position", {
                    my: "center top",
                    at: "center top",
                    of: window
                });

                $("#dialog-share").dialog("option", "position", {
                    my: "center",
                    at: "center",
                    of: window
                });

                $("#dialog-uploadImage").dialog("option", "position", {
                    my: "center",
                    at: "center",
                    of: window
                });

            })



            canvas.addEventListener('mousemove', function(evt) {

                if (oneInProgress) {

                    $('#myCanvas').css({
                        'cursor': 'not-allowed'
                    });
                    return;

                };

                $('#myCanvas').css({
                    'cursor': 'copy'
                })

                circleAndNo.show();

                var mousePos = getMousePos(canvas, evt);

                let leftOfCanvas = $('#overlay').position().left;

                circleAndNo.css({
                    top: mousePos.y,
                    left: leftOfCanvas + mousePos.x
                });

                let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                    if ($(item).css('display') != 'none') {
                        return item;
                    };

                })

                circleAndNo.children('elem').html(visibleCircles.length);

            }, false); // MOVE ON CANVAS

            function getEditFormatOfPopover() {

                return `
<h6 class="">Add Comment</h6>

<textarea rows="3" class="popTextArea px-2 w-100 border border-dark rounded text-dark" placeholder="It happened before summers... (min 5 characters)"></textarea>

<div class="d-flex justify-content-between align-items-center">

<span class="deletecircleAndNo text-center"><i class="fas fa-times px-2"></i></span>
<button class="popBtn btn btn-sm btn-dark no-active" disabled>Save</button>

            </div>
`;

            }

            let createEditablePopover = new command({

                execute: function() {

                    let circleNo = createEditablePopover.DOMelem;

                    $(circleNo).data({
                        editFlag: true
                    }).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('hover-pop custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    createEditablePopover.freshresults.push(circleNo);

                    eventSequence.push({
                        event: 'editable popover created',
                        markerDOM: circleNo
                    })

                    oneInProgress = true;

                    console.log('Editable popover is created');

                },

                undo: function() {

                    let circleNo = createEditablePopover.freshresults.pop();

                    createEditablePopover.undoresult.push(circleNo);

                    $(circleNo).data({
                        editFlag: false
                    }).children('span').popover('hide');

                    oneInProgress = false;

                    return 'editable pop up hides';

                },

                redo: function() {

                    let circleNo = createEditablePopover.undoresult.pop();

                    createEditablePopover.freshresults.push(circleNo);

                    $(circleNo).data({
                        editFlag: true
                    }).children('span').popover('show');;

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('hover-pop custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    oneInProgress = true;

                    undoNredo.redoInCommand();

                    return 'editable pop up shows';

                }

            })

            let markerCreated = new command({

                execute: function() {

                    let DOM = markerCreated.DOMelem;
                    let event = markerCreated.data1;

                    circleAndNo.clone().prependTo('#for-printing');

                    let mousePos = getMousePos(DOM, event);
                    let percentX = mousePos.x / $(DOM).width();
                    let percentY = mousePos.y / $(DOM).height();
                    let mFontSize = $('.circleAndNo:eq(0)').css('font-size').slice(0, -2) / $(DOM).width();
                    let mHeight = $('.circleAndNo:eq(0)').height() / $(DOM).width();
                    let mWidth = $('.circleAndNo:eq(0)').width() / $(DOM).width();

                    $('.circleAndNo:eq(0)').css({
                        'z-index': 4
                    }).data({
                        'percentX': percentX,
                        'percentY': percentY,
                        'mFontSize': mFontSize,
                        'mHeight': mHeight,
                        'mWidth': mWidth
                    });

                    let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                        if ($(item).css('display') != 'none') {
                            return item;
                        };

                    })

                    circleAndNo.children('elem').html(visibleCircles.length);

                    markerCreated.freshresults.push($('.circleAndNo:eq(0)')[0]);

                    eventSequence.push({
                        event: 'marker created',
                        markerDOM: $('.circleAndNo:eq(0)')[0]
                    })

                    console.log('circle:eq(0) is created');

                    return $('.circleAndNo:eq(0)')[0];

                },

                undo: function() {

                    let circleNo = markerCreated.freshresults.pop();

                    markerCreated.undoresult.push(circleNo);

                    $(circleNo).hide();

                    reDrawCanvasMarkers();

                    store_circle_data();

                    return 'circle on canvas is hide()';

                },

                redo: function() {

                    let circleNo = markerCreated.undoresult.pop();

                    markerCreated.freshresults.push(circleNo);

                    $(circleNo).show();

                    reDrawCanvasMarkers();

                    oneInProgress = true;

                    return 'circle on canvas is show()'

                }

            })

            function reDrawCanvasMarkers() {

                let visibleCircles = $.grep($('.circleAndNo'), function(item) {

                    if ($(item).css('display') != 'none') {

                        return item;

                    };

                })

                let totalMarkersOnCanvas = visibleCircles.length;

                $.each(visibleCircles, function(key, value) {

                    $(this).children('elem').html(totalMarkersOnCanvas - key)

                })

                $('.circleAndNo').last().children('elem').html(totalMarkersOnCanvas + 1);

                return true;

            }

            canvas.addEventListener('mousedown', function(evt) {

                if (oneInProgress) {
                    return
                };

                markerCreated.executeInCommand(this, evt);

                let circleNo = markerCreated.executedResult;

                createEditablePopover.executeInCommand(circleNo);

            }, false); // MARKER PLOTTING IN CANVAS

            canvas.addEventListener('mouseleave', function(evt) {

                circleAndNo.hide();

            });

            $(document).on('mouseenter mouseleave', '.circleAndNo', function(e) {

                $(this).toggleClass('bg-dark').toggleClass('bg-light');

                if ($(this).data().editFlag || !($(this).data().comment)) {
                    return
                };

                $(this).children().popover('toggle');

                console.log('2 circle mouseenter');

                $('.popover:eq(-1)').addClass('hover-pop custom-dark-popover bg-dark');

                let elem = `
<div class="text-here p-2 w-100 bg-dark rounded text-light">` + $(this).data('comment') + `</div>
<div class="px-2"><small class="text-muted notify-in-pop py-2 text-light text-left">Press to edit or delete</small></div>
`;

                $('.popover-body:eq(-1)').html(elem);

                if (oneInProgress) {

                    $('.notify-in-pop').html('An edit is open');

                }

            })

            $(document).on('shown.bs.popover', '.circleAndNo', function(e) {

                let el = $('.popover:eq(-1)').css('transform');

                function getTransform(el) {

                    var results = el.match(/matrix(?:(3d)\(\d+(?:, \d+)*(?:, (\d+))(?:, (\d+))(?:, (\d+)), \d+\)|\(\d+(?:, \d+)*(?:, (\d+))(?:, (\d+))\))/)

                    if (!results) return [0, 0, 0];
                    if (results[1] == '3d') return results.slice(2, 5);
                    results.push(0);
                    return results.slice(5, 8);

                }

                let popHeight = parseInt(getTransform(el)[1], 10) + $('.popover:eq(-1)').height();

                console.log('popHt: ' + popHeight,
                            'popTop: ' + getTransform(el)[1],
                            'circleTop: ' + $(this).css('top'));

                if (popHeight >= $(document).height() * 0.9) {

                    $('.custom-dark-popover .arrow').remove();

                }

                $('#dynamic').remove();

                let popId = '#' + $(this).find('span').attr('aria-describedby');

                console.log($(popId).last().attr('x-placement'));

                if ($(popId).last().attr('x-placement') == 'bottom') {

                    $("<style type='text/css' id='dynamic' />").appendTo("head");

                    $("#dynamic").text(`

.custom-dark-popover .arrow::after {


border-bottom-color: #343a40;


}`

                                      );

                } else {

                    $("<style type='text/css' id='dynamic' />").appendTo("head");

                    $("#dynamic").text(`

.custom-dark-popover .arrow::after {


border-top-color: #343a40;


}`

                                      );

                }


            })

            $(document).on('click', '.circleAndNo', function() {

                if (oneInProgress) {
                    return
                };

                createEditablePopover.executeInCommand(this);

                placeCircleDatainTextArea($(this).data().comment);

            })

            function placeCircleDatainTextArea(comment) {

                $('.popTextArea:eq(-1)').html(comment);

                if ($('.popTextArea:eq(-1)').val().length > 4) {

                    $('.popBtn:eq(-1)').removeAttr('disabled', 'disabled');

                }

                console.log('data placed in the text area');

            }

            $(document).on('keyup', '.popTextArea', function() {

                if (!(($(this).val().length) >= 5)) {

                    $('.popBtn').attr('disabled', 'disabled');

                    return

                }

                $('.popBtn').removeAttr('disabled');

            })

            let dataAmendinPop = new command({

                execute: function(DOMelem) {

                    dataAmendinPop.freshresults.push($(DOMelem).data().comment);

                    console.log('data amended in text area');

                    return true;

                },

                undo: function() {

                    let currentData = $('.popTextArea').val();

                    dataAmendinPop.undoresult.push(currentData);

                    let oldData = dataAmendinPop.freshresults.pop();

                    if (!oldData) {

                        undoNredo.undoInCommand();

                        return 'No data found so cleared the textarea';

                    }

                    $('.popTextArea').val(oldData);

                    $('.popBtn').removeAttr('disabled');

                    return 'Old value replaced in textarea';

                },

                redo: function() {

                    let currentData = $('.popTextArea').val();

                    if (currentData) {

                        dataAmendinPop.freshresults.push(currentData);

                    }

                    let newData = dataAmendinPop.undoresult.pop();

                    $('.popTextArea').val(newData);

                    $('.popBtn').removeAttr('disabled');

                    return 'New value placed in textarea';

                }


            })

            let popGoesHidden = new command({

                execute: function(DOMelem, notReq, newData) {

                    let circleNo = $('[aria-describedby="' + $(DOMelem).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                    oneInProgress = false;

                    $(circleNo).data({
                        comment: newData,
                        editFlag: false
                    }).children('span').popover('hide');

                    circleAndNo.css({
                        opacity: 1
                    });

                    popGoesHidden.freshresults.push(circleNo);

                    console.log('Data saved in circle and popover goes hidden');

                    return true;

                },

                undo: function() {

                    let circleNo = popGoesHidden.freshresults.pop();

                    popGoesHidden.undoresult.push(circleNo);

                    let prvsData = popGoesHidden.arrayData.pop();

                    popGoesHidden.arrayData2.push(prvsData);

                    console.log('prvs Data', popGoesHidden.arrayData);

                    $(circleNo).data({
                        comment: prvsData,
                        editFlag: true
                    }).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    placeCircleDatainTextArea(prvsData);

                    oneInProgress = true;

                    return 'Popover editable format is opened now';

                },

                redo: function() {

                    oneInProgress = false;

                    let circleNo = popGoesHidden.undoresult.pop();

                    popGoesHidden.freshresults.push(circleNo);

                    let prvsData = popGoesHidden.arrayData2.pop();

                    popGoesHidden.arrayData.push(prvsData);

                    $(circleNo).data({
                        comment: prvsData,
                        editFlag: false
                    }).children('span').popover('hide');

                    store_circle_data();

                    return 'Popover goes hide';


                }

            })

            let givedatatotextbox = function() {

                let comments = new Array();

                let smallelem = ``;
                let bigelems = ``;

                $.each($('.circleAndNo'), function(key, value) {

                    if ($(this).data().comment && $(this).css('display') != 'none') {

                        comments[$(this).find('elem').html() - 1] = $(this).data().comment;

                    }

                })

                let needColAdjustments = false;

                $('.detailBox-Big').find('.rounded-bottom').children().remove();

                $('.detailBox').children().remove();

                $.each(comments, function(key, value) {

                    smallelem = `<span class="small-elem border-right px-1">` + (key + 1) + `</span>`;

                    bigelems = `<div class="big-text-here col-md-4 col-sm-6 col-12 text-left p-2">
<span class="badge badge-light">` + (key + 1) + `</span>
<small>` + value + `</small>
            </div>`;

                    $('.detailBox').append(smallelem);

                    $('.detailBox-Big').find('.rounded-bottom').append(bigelems);

                    $('.big-text-here').last().data({
                        textLength: value.length,
                        textBlock: Math.floor(key / 3)
                    });

                    if (value.length > 125) {

                        needColAdjustments = true;

                    }

                })

                $('.small-elem:eq(-1)').removeClass('border-right');

                if (!needColAdjustments) {

                    return;

                }

                needColAdjustments = false;

                let spaceAval = 12;
                let rowNo = 0;
                let rowAlloted = 0;
                let cArray = [];
                let rowArray = [];

                $.each($('.big-text-here'), function(key, value) {

                    let currentBlock = $(value).data().textBlock;

                    let sumLength = 0;

                    let totalSize = $.grep($('.big-text-here'), function(item) {

                        if ($(item).data().textBlock == currentBlock) {

                            sumLength += $(item).data().textLength;

                        }

                    });

                    let ownPercent = $(value).data().textLength / sumLength * 100;

                    let ineed = function() {

                        if (ownPercent <= 60) {

                            return 4;

                        }

                        if (ownPercent <= 90) {

                            return 8;

                        }

                        if (ownPercent <= 100) {

                            return 12;

                        }

                    }

                    let giveSpace = function(needed, item) {

                        if (needed <= spaceAval) {

                            spaceAval = spaceAval - needed;

                            cArray.push(item);

                            return rowNo;

                        }

                        cArray = [];

                        rowNo = rowNo + 1;

                        spaceAval = 12;

                        return giveSpace(needed, item);

                    }

                    let needed = ineed();

                    rowAlloted = giveSpace(needed, $(this));

                    $(this).data({
                        neededSpace: needed,
                        rowAlloted: rowAlloted
                    });

                    rowArray[rowAlloted] = cArray;

                });

                $.each(rowArray, function(key, value) {

                    let className = function() {

                        if (value.length == 1) {

                            value[0].toggleClass('col-md-4 col-md-12 col-sm-6 col-sm-12');

                            return 'col-md-12';

                        }

                        if (value.length == 3) {

                            value[2].toggleClass('col-sm-6 col-sm-12');
                            return 'col-md-4';

                        }

                        if (value.length == 2) {

                            if (value[0].data().neededSpace == value[1].data().neededSpace) {

                                value[0].toggleClass('col-md-4 col-md-6');
                                value[1].toggleClass('col-md-4 col-md-6');

                                return 'col-md-6 col-md-6';

                            }

                            if (value[0].data().neededSpace == 8) {

                                value[0].toggleClass('col-md-4 col-md-8');

                                return 'col-md-8 col-md-4';

                            }

                            value[1].toggleClass('col-md-4 col-md-8');

                            return 'col-md-4 col-md-8';


                        }

                    }

                    //					console.log(className());

                    className();

                })

            }

            $(document).on('mouseenter mouseleave', '.small-elem', function() {

                let serNo = parseInt($(this).html());

                let thisCircle = $.grep($('.circleAndNo'), function(item) {

                    return $(item).find('elem').html() == serNo;

                })

                $(thisCircle).trigger('mouseenter');

                $(this).toggleClass('bg-light text-dark');

            })

            $(document).on('mouseenter mouseleave', '.big-text-here', function() {

                let serNo = parseInt($(this).find('.badge').html());

                let thisCircle = $.grep($('.circleAndNo'), function(item) {

                    return $(item).find('elem').html() == serNo;

                })

                $(thisCircle).trigger('mouseenter');

                $(this).toggleClass('bg-light text-dark');

            })

            $(document).on('click', '.popBtn', function() {

                let oldData = $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo').data().comment;

                let newData = $('.popTextArea').val();

                if (oldData != newData) {

                    let circleNo = $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                    dataAmendinPop.executeInCommand(circleNo, false, false);

                    eventSequence.push({

                        event: 'data amended in textArea',
                        markerDOM: circleNo,
                        data: oldData

                    })

                }

                popGoesHidden.executeInCommand(this, false, newData);

                store_circle_data();

                eventSequence.push({

                    event: 'Edit Pop goes hidden',
                    markerDOM: $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo'),
                    data: newData

                })

            })

            $(document).on('mouseenter mouseleave', '.deletecircleAndNo', function() {

                $(this).toggleClass('border rounded text-light').siblings('.popBtn').toggleClass('btn-dark btn-light').closest('.popover').toggleClass('bg-dark text-light custom-dark-popover').find('.popTextArea').toggleClass('text-dark text-light bg-dark border-light border-dark').siblings('h6').toggleClass('text-light').parent('.popover');

                $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo').toggleClass('bg-dark bg-light');

            })

            let markerDeleted = new command({

                execute: function() {

                    let DOM = markerDeleted.DOMelem;

                    oneInProgress = false;

                    $('[aria-describedby="' + $(DOM).closest('.popover').attr('id') + '"]').closest('.circleAndNo').hide();

                    $(DOM).closest('.popover').remove();

                    reDrawCanvasMarkers();

                    return $('[aria-describedby="' + $(DOM).closest('.popover').attr('id') + '"]').closest('.circleAndNo');

                },

                undo: function() {

                    let circleAndNo = markerDeleted.executedResult;

                    oneInProgress = true;

                    $(circleAndNo).removeClass('bg-dark bg-light').show();

                    reDrawCanvasMarkers();

                    let comment = circleAndNo.data().comment;

                    $(circleAndNo).children('span').popover('show');

                    let elem = getEditFormatOfPopover();

                    $('.popover').removeClass('custom-dark-popover bg-dark');

                    $('.popover-body:eq(-1)').html(elem);

                    $('.circleAndNo:eq(0)').data({
                        editFlag: true
                    });

                    $('.popTextArea').val(comment);

                    if (comment && comment.length > 4) {

                        $('.popBtn').removeAttr('disabled');

                    }

                    return 'editable popover no entry yet';

                },

                redo: function() {

                    let circleAndNo = markerDeleted.executedResult;

                    oneInProgress = false;

                    $(circleAndNo).hide().children('span').popover('hide');

                    reDrawCanvasMarkers();

                    store_circle_data();

                    return 'marker deleted again';

                }

            })

            $(document).on('click', '.deletecircleAndNo', function() {

                eventSequence.push({
                    event: 'marker deleted',
                    markerDOM: $('[aria-describedby="' + $(this).closest('.popover').attr('id') + '"]').closest('.circleAndNo')
                });

                console.log(eventSequence);

                markerDeleted.executeInCommand(this, false);

                store_circle_data();

            })

            $(document).on('mouseenter mouseleave', '.canvas-btn', function() {

                $(this).toggleClass('bg-light text-dark');

            }) // SIDE BAR BUTTONS

            $(document).on('click', '.settings-btn', function() {

                mouseEnteredPopOverAlready = true;

                $(this).toggleClass('bg-light text-dark');

                let popId = '#' + $(this).children('span').popover('toggle').attr('aria-describedby');

                $(popId).children('.popover-header').html(`Setting's`).addClass('bg-dark custom-popover-header');

                $(popId).children('.arrow').css({
                    visibility: 'hidden'
                });

                let elem = `



<div class="pb-2 border-bottom d-flex justify-content-center flex-wrap align-items-center">

<div class="marker-circle rounded-circle bg-info text-light border-light d-flex align-items-center justify-content-center mx-1">1</div>
<div class="marker-circle rounded-circle bg-warning text-dark border-light d-flex align-items-center justify-content-center mx-1">2</div>
<div class="marker-circle rounded-circle bg-light text-dark border-light d-flex align-items-center justify-content-center mx-1">3</div>
<div class="marker-circle rounded-circle bg-dark border-light text-light d-flex align-items-center justify-content-center mx-1">4</div>
<div class="marker-circle rounded-circle bg-primary border-light text-light d-flex align-items-center justify-content-center mx-1">5</div>
<div class="marker-circle rounded-circle bg-danger border-light text-light d-flex align-items-center justify-content-center mx-1">6</div>
<div class="marker-circle rounded-circle bg-success border-light text-light d-flex align-items-center justify-content-center mx-1">7</div>


            </div>

<div class="py-3 border-bottom d-flex justify-content-center flex-wrap align-items-center">

<input class="slider w-100" type="range" min="1" max="100" value="50">

            </div>

<div class="py-2 text-center d-flex justify-content-center flex-wrap align-items-center">

<div class="w-100 d-flex">

<div class="box box-right-bottom border border-dark rounded mx-1">

<div class="rtbt-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-left-bottom border border-dark rounded mx-1">

<div class="ltbt-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-left-top border border-dark rounded mx-1">

<div class="lttp-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-right-top border border-dark rounded mx-1">

<div class="rttp-subBox w-50 bg-dark border h-25 position-absolute rounded"></div>

            </div>

<div class="box box-big-bottom border border-dark rounded mx-1">

<div class="bgbt-subBox w-100 bg-dark border rounded-bottom h-50 position-absolute"></div>

            </div>

            </div>

            </div>



`;
                $(popId).children('.popover-body').html(elem);

                let currentht = $('.circleAndNo').css('height');
                let fontSize = $('.circleAndNo').css('font-size');
                let fontWeight = $('.circleAndNo').css('font-weight');

                $('.marker-circle').css({
                    height: '1.7rem',
                    width: '1.7rem',
                    'font-size': '90%',
                    'font-weight': 'bold',
                    cursor: 'pointer'
                });

                $('.circleAndNo:eq(-1)').css({
                    top: '50%',
                    left: '50%'
                }).show();

                $('.slider').css({
                    cursor: 'pointer'
                });

                if (typeof sliderVal != 'undefined') {

                    $('.slider').val(sliderVal);

                } else {

                    $('.slider').val(50);

                }

                $(document)
                    .on('mouseenter', popId, function() {

                    mouseEnteredPopOverAlready = true;

                })
                    .on('mouseleave', popId, function() {

                    mouseEnteredPopOverAlready = false;
                    $('.settings-btn').toggleClass('bg-light text-dark');
                    $('.settings-btn').children('span').popover('hide')
                    $('.circleAndNo:eq(-1)').hide();

                })

            })

            let markerSizeChanged = new command({

                execute: function() {

                    sliderVal = $('.slider').val();

                    circleAndNo.css({
                        'font-size': sliderVal / 50 * 80 + '%',
                        'height': sliderVal / 50 * 1.7 + 'rem',
                        'width': sliderVal / 50 * 1.7 + 'rem'
                    });

                    let presentCircleDims = circleAndNo.css(['font-size', 'height', 'width']);

                    return true;

                },

                undo: function() {

                    let prvsSliderValue = markerSizeChanged.arrayData.pop();

                    //					$('.circleAndNo:eq(-1)').css({top:'50%',left:'50%'}).show();

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    circleAndNo.css(prvsSliderValue);

                    markerSizeChanged.undoresult.push(prvsSliderValue);

                    return 'Undo marker size';

                },

                redo: function() {

                    let prvsSliderValue = markerSizeChanged.undoresult.pop();

                    //					$('.circleAndNo:eq(-1)').css({top:'50%',left:'50%'}).show();

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    circleAndNo.css(prvsSliderValue);

                    markerSizeChanged.arrayData.push(prvsSliderValue);

                    return 'Redo marker size';

                }

            })

            $(document).on('change', '.slider', function() {

                eventSequence.push({

                    event: 'marker size changed',
                    markerDOM: circleAndNo,

                })

                console.log(eventSequence);

                let presentCircleDims = circleAndNo.css(['font-size', 'height', 'width']);

                markerSizeChanged.executeInCommand(false, false, presentCircleDims);



            })

            let markerThemeChanged = new command({

                execute: function() {

                    let DOMelem = markerThemeChanged.DOMelem;

                    let fullClassesNew = DOMelem.classList;

                    let foundClassesNew = $.grep(fullClassesNew, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesNew = foundClassesNew.join(' ');

                    let str = $('.circleAndNo').attr('class');

                    var fullClassesOld = str.split(' ');

                    let foundClassesOld = $.grep(fullClassesOld, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesOld = foundClassesOld.join(' ');

                    eventSequence.push({

                        event: 'bg- and text- changed',
                        oldClass: foundClassesOld,
                        newClass: foundClassesNew

                    })

                    console.log(eventSequence);

                    let combinedClassNames = foundClassesNew + ' ' + foundClassesOld;

                    $('.circleAndNo').toggleClass(combinedClassNames);

                    let classNames = {

                        old: foundClassesOld,
                        new: foundClassesNew

                    }

                    markerThemeChanged.freshresults.push(classNames);

                    console.log('fresh', markerThemeChanged.freshresults);

                    return combinedClassNames;

                },

                undo: function() {

                    let classes = markerThemeChanged.freshresults.pop();

                    console.log(classes);

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .removeClass(classes.new)
                        .addClass(classes.old)
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    markerThemeChanged.undoresult.push(classes);

                    console.log(markerThemeChanged.undoresult);

                },

                redo: function() {

                    let classes = markerThemeChanged.undoresult.pop();

                    console.log(markerThemeChanged.undoresult);

                    $('.circleAndNo:eq(-1)')
                        .show()
                        .stop(true, true)
                        .css({
                        top: '50%',
                        left: '50%',
                        opacity: 0
                    })
                        .removeClass(classes.old)
                        .addClass(classes.new)
                        .animate({
                        opacity: 1
                    }, 0)
                        .animate({
                        opacity: 1
                    }, 2000)
                        .animate({
                        opacity: 0
                    }, 30);

                    markerThemeChanged.freshresults.push(classes);

                }

            })

            $(document).on('click', '.marker-circle', function() {

                markerThemeChanged.executeInCommand(this);


            })

            $(document).on('click', '.box-right-top', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '',
                    right: '2%',
                    top: '2%',
                    bottom: ''
                }).attr({ctr:1});

            })

            $(document).on('click', '.box-left-top', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '2%',
                    right: '',
                    top: '2%',
                    bottom: ''
                }).attr({ctr:0});;

            })

            $(document).on('click', '.box-left-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '2%',
                    right: '',
                    top: '',
                    bottom: '2%'
                }).attr({ctr:2});;

            })

            $(document).on('click', '.box-right-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox-Big').hide();
                $('.detailBox').show().addClass('d-flex');
                $('.detailBox').css({
                    left: '',
                    right: '2%',
                    top: '',
                    bottom: '2%'
                }).attr({ctr:3});;

            })

            $(document).on('click', '.box-big-bottom', function() {

                let event = storeEvent();

                console.log(event);

                $('.detailBox').attr({ctr:4}).hide().removeClass('d-flex')
                $('.detailBox-Big').show();

            })

            $(document).on('click', 'body', function() {

                if (mouseEnteredPopOverAlready) {
                    return
                };

                $('.settings-btn').children('span').popover('hide');

            })

            $(document).on('click', '.undo', function() {

                undoNredo.undoInCommand();

            })

            $(document).on('click', '.redo', function() {

                undoNredo.redoInCommand();

            })

            $(document).on('mouseleave', '.undo', function() {

                $('.circleAndNo:eq(-1)').css({
                    opacity: 1
                }).hide();

            })

            $(document).on('mouseleave', '.redo', function() {

                $('.circleAndNo:eq(-1)').css({
                    opacity: 1
                }).hide();

            })

            function printcommand(instance) {

                this.array = [];

                this.execute = function execute(bool_textreq) {

                    this.array.push(instance);
                    instance.execute(bool_textreq);

                }

                this.undo = function undo(instance) {

                    let command = this.array.pop();
                    command.undo();

                }

            }

            let printhidendisplay = new printcommand({

                execute: function(textreq) {

                    let imgWt = $('.image').width();

                    let elem = $('#for-printing').clone().addClass('custom-hide bg-dark');

                    $('body').append(elem);

                    $('.custom-hide').children('.image').width(imgWt);

                    if (!(textreq)) {

                        return $('.custom-hide').children('.detailBox-Big').remove();

                    }

                    $('.custom-hide').children('.detailBox').remove();

                },

                undo: function() {

                    $('.custom-hide').remove();

                }

            });

            $(document).on('click', '.download-pic', function(e) {

                let aTag = `<a class="aTag" style="display:none">Click Me</a>`;

                $('body').append(aTag);

                printhidendisplay.execute(true);

                let div = document.querySelector('.custom-hide');

                html2canvas(div, {

                    useCORS: true,
                    backgroundColor: 'null'

                }).then(function(drawnPic) {

                    let link = drawnPic.toDataURL('image/jpeg');

                    console.log('converted successfully');

                    $('.aTag:eq(0)').attr({
                        href: link,
                        download: 'newImage'
                    }).click();

                    printhidendisplay.undo();

                });

            })

            $(document).on('click', '.aTag', function(e) {

                this.click();
                this.remove();

            })

            $('.open-btn').click(function() {

                $('.btn-container').hide();

                $("#dialog-uploadImage").dialog('open');

            })

            $('.close-btn').click(function() {

                //				$('.btn-container').show();

                $("#dialog-final").dialog('close');

                window.location.reload(true);

            })

            let spinner = {

                start: function() {

                    let elem = `
<div class="modal-spinner">

<div class="d-flex h-100 align-items-center">
<div class="progress col-2 p-0 mx-auto" style="height: 0.4rem">
<div class="progress-bar progress-bar-striped progress-bar-animated bg-info" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
            </div>
            </div>

            </div>`;

                    $('body').append(elem);

                },

                end: function() {

                    $('.modal-spinner').remove();

                }

            }

            $('.edit-btn').click(function() {

                $("#dialog-final").dialog('open');

                $("#dialog-share").dialog('close');

                $.post('http://localhost/themepic/store_plotting.php', {
                    delete: true
                }, function(result) {

                    console.log(result);

                });

            })

            $('.validate-image-exists').validate({

                rules: {
                    'image-link': {

                        required: true,
                        url: true,

                    }

                },
                messages: {

                    'image-link': {

                        required: '<i class="text-warning fas fa-exclamation-circle"></i> This url is required',
                        url: '<i class="text-warning fas fa-exclamation-circle"></i> a url looks just like a website e.g. "http://www.something.com"',

                    }

                }

            })

            $('.card').on('click', function() {

              let myArray = $(this).find('.draft-badge').attr('class').split(' ');

              if ($.inArray('Published', myArray) !== -1) {
                let picId = $(this).find('.card-image-top').attr('data-id');
                return window.location.assign(`/picture/${picId},{{token}}`);
              };

              spinner.start();

              let imageData = $(this).find('.card-image-top').attr('data-comments');
              let imageURL = $(this).find('.card-image-top').attr('data-image');
              let imageID = $(this).find('.card-image-top').attr('data-id');

              if (imageData) {
                dataforimageexists.status = true;
                dataforimageexists.data = JSON.parse(imageData);
              }

              $('.blackish-overlay').css({
                height: $('body').height(),
                width: $('body').width(),
                display: 'block',
              })
              $("#dialog-final").dialog('open');

              $('.image').attr({
                src: $(this).find('.card-image-top').attr('data-image'),
                firstLoad: false
              }).data({public_id: imageID});

              spinner.end();

            })

            let dataforimageexists = new Object();
            dataforimageexists.status = false;

            $('.image').on('load', function(e) {

                $(this).css({
                    'max-height': wht / 1.1,
                    'max-width': '100%'
                });

                let imgWt = $(this).width();
                let imgHt = $(this).height();

                if (imgHt < 0) return console.log('.image height is less then 0 so stopping resetting of canvas size.');

                $('.carry-menu').height(imgHt);

                if (wwt < 767 || imgHt < 300) {

                    $('.carry-menu').height('auto');

                }

                console.log('.image Load completed', imgHt, imgWt);

                $('#overlay').css({
                    height: imgHt,
                    width: imgWt
                });

                $('.detailBox-Big').css({
                    width: imgWt + 2
                });

                $('.detailBox').css({
                    right: '2%',
                    bottom: '2%'
                });

                spinner.end();

                console.log($(this).data().public_id);

                if (!($(this).data().public_id)) {

                    $('.saving-image').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                    let data = {
            					"query": 'uploadImage',
            					"token": `{{token}}`,
                      "status": "Draft",
                      "img": $(this).attr('src'),
            				};

            				data = JSON.stringify(data);

            				$.ajax({
            				    url: '/loggedin',
            				    type: 'post',
            				    data,
            				    headers: {
            				        'content-type': 'application/json',
            				    }
            					}).done((res) => {
            						console.log(res);
                        $(this).data({'public_id':res.public_id, 'thumbnail_saved': true});
                        update_image_table_db('save_draft');
                        $('.saving-image').addClass('d-none').animate({opacity: 1}, 500, 'linear');
            					}).fail((e) => {
            						console.log('ERROR', e.responseText);
            					});

                } else if ($(this).attr('firstLoad') === 'true') {

                  update_image_table_db('save_draft');

                };

                console.log(`Data for img exist: ${dataforimageexists.status}`);

                if (dataforimageexists.status) {

                    let elem = `<div class="circleAndNo rounded-circle bg-info text-light" ><span data-container="body" data-toggle="popover" data-placement="top" data-content="Vivamus sagittis lacus vel augue laoreet rutrum faucibus."></span><elem>1</elem></div>`;

                    let obj = dataforimageexists.data;

                    $.each(obj, function(key, value) {

                        let newObj = value.data;

                        $('#for-printing').prepend(elem);

                        $('.circleAndNo:eq(0)').css({
                            'z-index': 4,
                            left: newObj.percentX * $('.image').width() + $('#overlay').position().left,
                            top: newObj.percentY * $('.image').height(),
                            'font-size': newObj.mFontSize * $('.image').width(),
                            height: newObj.mHeight * $('.image').width(),
                            width: newObj.mWidth * $('.image').width()
                        }).data({
                            'percentX': newObj.percentX,
                            'percentY': newObj.percentY,
                            'mFontSize': newObj.mFontSize,
                            'mHeight': newObj.mHeight,
                            'mWidth': newObj.mWidth,
                            comment: value.comment,
                            editFlag: false
                        }).find('elem').html(key+1);

                        $('.circleAndNo').removeClass().addClass(newObj.classs);

                    })

                    let fullClassesNew = $('.circleAndNo').attr('class').split(' ');

                    let foundClassesNew = $.grep(fullClassesNew, function(item) {

                        if (item.indexOf('bg-') != -1 || item.indexOf('text-') != -1) {

                            return item

                        }

                    })

                    foundClassesNew = foundClassesNew.join(' ');

                    givedatatotextbox();

                    dataforimageexists.status = false;

                };

            });

            $('.thumbnail').on('load', function() {

              var StorageCanvas = document.getElementById('canvas-for-storage');

              var ctx = StorageCanvas.getContext("2d");

              var img = $('.thumbnail')[0];

              ctx.drawImage(img, 0, 0);

              var MAX_WIDTH = 450;
              var MAX_HEIGHT = 2500;
              var width = img.width;
              var height = img.height;

              if (width > height) {
                  if (width > MAX_WIDTH) {
                      height *= MAX_WIDTH / width;
                      width = MAX_WIDTH;
                      console.log('thumbnail is now downsized - I.')
                  }
              } else {
                  if (height > MAX_HEIGHT) {
                      width *= MAX_HEIGHT / height;
                      height = MAX_HEIGHT;
                      console.log('thumbnail is now downsized - II.')
                  }
              };
              StorageCanvas.width = width;
              StorageCanvas.height = height;
              var ctx = StorageCanvas.getContext("2d");
              ctx.drawImage(img, 0, 0, width, height);
              var dataurl = StorageCanvas.toDataURL("image/png");

              let public_id = $('.image').data().public_id;

              $('.saving-thumbnail').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

              let data = {
                "query": 'uploadThumbnail',
                "public_id": public_id,
                "token": `{{token}}`,
                "img": dataurl,
              };

              data = JSON.stringify(data);

              $.ajax({
                  url: '/loggedin',
                  type: 'post',
                  data,
                  headers: {
                      'content-type': 'application/json',
                  }
                }).done((res) => {
                  console.log(res);
                  $('.saving-thumbnail').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                }).fail((e) => {
                  console.log('error', e.responseText);
                });

            });

            function readURL(input) {

                if (input.files && input.files[0] && (/\.(jpe?g|png)$/i.test(input.files[0].name))) {

                    var reader = new FileReader();

                    reader.addEventListener("load", function(e) {

                        $('#imgPreview').attr('src', reader.result).css({
                            'max-height': '100%',
                            'max-width': '100%'
                        });

                        $('.preview-image-box').show().addClass('d-flex').animate({

                            opacity: 1,

                        }, 500, 'linear');

                        $('.image-for-storage').attr({
                            src: reader.result
                        });

                    })

                    reader.readAsDataURL(input.files[0]);

                } else {

                    $('#upload-error').remove();

                    let elem = `<div id="upload-error" class="mt-2"><small><i class="text-warning fas fa-exclamation-circle"></i> Oops this file is not an image.</small></div>`;

                    $('.upload-error-here').append(elem);

                    $('#upload-error').fadeIn();

                }

            }

            $("#imgInp").change(function() {

                readURL(this);

            });

            $('.image-for-storage').on('load', function() {

                console.log('2. ".image-for-storage" is loaded now at an hidden place.');

                ConvertImageandStoreImageInCloudinary();

            })

            let ConvertImageandStoreImageInCloudinary = function() {

                var StorageCanvas = document.getElementById('canvas-for-storage');

                var ctx = StorageCanvas.getContext("2d");

                var img = $('.image-for-storage')[0];

                ctx.drawImage(img, 0, 0);

                var MAX_WIDTH = 1200;
                var MAX_HEIGHT = 800;
                var width = img.width;
                var height = img.height;

                if (width > height) {
                    if (width > MAX_WIDTH) {
                        height *= MAX_WIDTH / width;
                        width = MAX_WIDTH;
                        console.log('Image is now downsized - I.')
                    }
                } else {
                    if (height > MAX_HEIGHT) {
                        width *= MAX_HEIGHT / height;
                        height = MAX_HEIGHT;
                        console.log('Image is now downsized - II.')
                    }
                };

                StorageCanvas.width = width;
                StorageCanvas.height = height;
                var ctx = StorageCanvas.getContext("2d");
                ctx.drawImage(img, 0, 0, width, height);

                function isTainted(ctx) {
                    try {
                        //                        var pixel = ctx.getImageData(0, 0, 1, 1);
                        var dataurl = ctx.toDataURL("image/png");
                        return false;
                    } catch (err) {
                        return (err.code === 18);
                    }
                }

                if (isTainted(StorageCanvas)) {

                    console.log('3. image-for-storage when placed in canvas, it is tainted.');

                    $('.ok-btn-box .error-span').find('small').html('<i class="text-warning fas fa-exclamation-circle"></i> Sorry, canvas is tainted! I will save these images in local database. Wait a moment please.');

                    let data = {
                      "query": 'uploadImage',
                      "token": `{{token}}`,
                      "status": "Draft",
                      "img": $("#image-link").val(),
                    };

                    data = JSON.stringify(data);

                    $.ajax({
                        url: '/loggedin',
                        type: 'post',
                        data,
                        headers: {
                            'content-type': 'application/json',
                        }
                      }).done((res) => {
                        console.log(res);
                        $('.image').data({'public_id':res.public_id}).attr({src: res.image});
                        $('.saving-image').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                      }).fail((e) => {
                        console.log('error', e.responseText);
                      });

                    return true;

                }

                var dataurl = StorageCanvas.toDataURL("image/png");

                $('.image').attr({
                    src: dataurl
                });

                console.log('Image tag is given the src of dataurl, but not loaded yet.');

                return;

            }

            $('.next-upload-btn').on('click', function() {

                $('#upload-error').remove();

                $("#dialog-final").dialog('open');

                $("#dialog-uploadImage").dialog('close');

                console.log('".image" is set to "firstLoad : true"');

                $('.image').attr({
                    firstLoad: true
                });

                $('.image').trigger('load');

            })

            $('.ok-btn').on('click', function(e) {

                if (!($(".validate-image-exists:eq(0)").valid())) {

                    $('.ok-btn-box').find('.error-span').show();

                    return;

                }

                console.log('1. Image is valid, add source to .image-for-storage');

                $('.saving-image').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                $('.image-for-storage').attr({
                    src: $("#image-link").val()
                });

                $('.ok-btn-box').find('.error-span').css({
                    display: 'none'
                });

                $("#dialog-final").dialog('open');

                $("#dialog-uploadImage").dialog('close');

                console.log('2. ".image" is set to "firstLoad : true"');

                $('.image').attr({
                    firstLoad: true
                });

                return 'dialog final is being opened';

            })

            $('.change-upload-btn').on('click', function() {

                $('.preview-image-box').animate({

                    opacity: 0,

                }, 100, "linear", function() {

                    $(this).hide().removeClass('d-flex');

                })

            })

            $('.share-btn').click(function() {

                spinner.start();

                update_image_table_db();

            })

            let update_image_table_db = function(call) {

                $('.saving-thumbnail').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                if ($('.image').height() < 10) {

                    console.log('.image height is less then 10 that means no .image is there');

                    return;

                }

                let aTag = `<a class="aTag" style="display:none">Click Me</a>`;

                $('body').append(aTag);

                printhidendisplay.execute(false);

                let div = document.querySelector('.custom-hide');

                // console.log('-- Going to print this printing area. Image link should be: ' + $('.custom-hide').find('.image').attr('src'));

                html2canvas(div, {

                    useCORS: true,
                    backgroundColor: 'null',
                    scale: 1,
                    logging: true

                }).then(function(drawnPic) {

                    let dataUrl = drawnPic.toDataURL('image/jpeg');
                    $('.thumbnail').attr({src: dataUrl});
                    printhidendisplay.undo();

                    if (call == 'save_draft') {

                        console.log('saved draft');

                        return;

                    }

                    spinner.end();

                    $('#link2page').html(`https://${window.location.hostname}/${$('.image').data().public_id}`);

                    $('.share-btn').tooltip('hide');

                    $("#dialog-final").dialog('close');

                    $("#dialog-share").dialog('open');

                  });

                return true;
            };

            let store_circle_data = function() {

                givedatatotextbox();

                let circleData = new Array();

                let circlesOnDOM = $('.circleAndNo').each(function() {

                    if ($(this).data().comment && $(this).css('display') != 'none') {

                        $(this).data({
                            classs: $(this).attr('class')
                        });

                        circleData.push({
                            data: $(this).data(),
                            label: $(this).children('elem').html(),
                            comment: $(this).data().comment,
                        });

                    }

                });

                console.log(circleData);

                update_image_table_db('save_draft');

                $('.saving-data').removeClass('d-none').animate({opacity: 1}, 500, 'linear');

                let imageData = JSON.stringify(circleData);

                let data = {
                  "query": 'updateImageData',
                  "public_id": $('.image').data().public_id,
                  "token": `{{token}}`,
                  "imageData": imageData
                };

                data = JSON.stringify(data);

                console.log(data);

                $.ajax({
                    url: '/loggedin',
                    type: 'post',
                    data,
                    headers: {
                        'content-type': 'application/json',
                    }
                  }).done((res) => {
                    console.log(res);
                    $('.saving-data').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                  }).fail((e) => {
                    console.log(e.responseText);
                  });

            }

            let images_cloudinary = new Object();



            $('.publish-btn').on('click', function() {

                let data = {
                  "query": 'updateImageStatus',
                  "public_id": $('.image').data().public_id,
                  "token": `{{token}}`,
                  "status": 'Published',
                  "title" : $('#in-title').val(),
                  "ctr": $('.detailBox').attr('ctr'),
                };

                data = JSON.stringify(data);

                console.log(data);

                $.ajax({
                    url: '/loggedin',
                    type: 'post',
                    data,
                    headers: {
                        'content-type': 'application/json',
                    }
                  }).done((res) => {
                    console.log(res);
                    $('.saving-data').addClass('d-none').animate({opacity: 1}, 500, 'linear');
                    $('.saving-done').html('<i class="fas fa-check-circle"></i> Published');
                    let picId = $('.image').data().public_id;
                    return window.location.assign(`/picture/${picId},{{token}}`);
                  }).fail((e) => {
                    console.log(e.responseText);
                  });

            });

            var $grid = $('.grid').masonry({

                itemSelector: '.grid-item',
                initLayout: true

            });

            $('.contribution-btn').on('click', function() {

                $('.badge-success').closest('.grid-item').show();

                $('.badge-danger').closest('.grid-item').show();

                $grid.masonry('layout');


            })

            $('.drafts-btn').on('click', function() {

                $('.Published').closest('.grid-item').hide();

                $('.Draft').closest('.grid-item').show();

                $grid.masonry('layout');

            })

            $('.published-btn').on('click', function() {

                $('.Published').closest('.grid-item').show();

                $('.Draft').closest('.grid-item').hide();

                $grid.masonry('layout');

            })

            $('.back-btn').on('mouseenter mouseleave', function() {

                $(this).toggleClass('text-info', 50);

            })

            $('.upload-textarea-wrapper textarea').on('focusin', function() {

                $('.upload-textarea-wrapper').find('.text-center').css({
                    opacity: 0.05
                });
                $('.upload-textarea-wrapper').find('.ok-btn-box').css({
                    display: 'block',
                    opacity: 1
                });

            })

            $('body').on('click', function(e) {

                if ($(e.target).is('.ok-btn')) {

                    return;

                }

                // Clicking outside textarea will trigger c-event
                if (!($(e.target).is('.upload-textarea-wrapper textarea'))) {

                    $('.upload-textarea-wrapper textarea').trigger('c-event');

                }

            })

            $('.upload-textarea-wrapper textarea').on('c-event', function() {

                if ($(this).val() == '') {

                    $('.upload-textarea-wrapper').find('.text-center').css({
                        opacity: 1
                    });
                    $('.upload-textarea-wrapper').find('.ok-btn-box').css({
                        display: 'none',
                        opacity: 0
                    });

                }

            })

            $('.delete-badge').on('mouseenter mouseleave', function() {
              $(this).toggleClass('text-secondary text-warning').siblings('.card').toggleClass('bg-dark bg-warning');
            });

            $('.delete-badge').on('click', function() {

              let data = {
                "query": 'deleteImage',
                "token": `{{token}}`,
                "public_id": $(this).siblings('.card').find('.card-image-top').attr('data-id'),
              };

              data = JSON.stringify(data);

              $.ajax({
                  url: '/loggedin',
                  type: 'post',
                  data,
                  headers: {
                      'content-type': 'application/json',
                  }
                }).done((res) => {
                  console.log(res);
                  window.location.reload(true);
                }).fail((e) => {
                  console.log('ERROR', e.responseText);
                });
            });

            $(window).on("load", function() {
              console.log('All images loaded');
              $grid.masonry('layout');
            });

            $grid.on( 'layoutComplete', () => {
                try {
                  // $('.card:eq(-1)').trigger('click');
                }
                catch (e) {
                  console.log(e)
                }
            });

        </script>

    </body>

</html>
